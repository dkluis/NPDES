@page "/"
@page "/Index"

@using System.Text.RegularExpressions

@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedSessionStorage _sessionStore

@inject StateService _stateService
@inject NavigationManager _navMgr

@if (_stateService.IsLoggedIn && _stateService.UserId != "Init")
{
    _navMgr.NavigateTo("/Home");
}
else
{
    <MudText Typo="Typo.h3" Align="Align.Center">Login Window</MudText>
    <MudButton @onclick="@FakeALogin">Fake a Login</MudButton>
    
    <MudGrid>
    <MudItem xs="12" sm="7" md="5">
        <MudPaper Class="pa-4">
            <MudForm @ref="_form" @bind-IsValid="@_success" @bind-Errors="@_errors">
                    <MudTextField T="string" Label="Username" Required="true" RequiredError="User name is required!" @ref="_userName"/>
                    <MudTextField T="string" Label="Password" HelperText="Choose a strong password" @ref="_pwField1"
                                  InputType="InputType.Password"
                                  Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))" Required="true"
                                  RequiredError="Password is required!"/>
                    <MudTextField T="string"
                                  Label="Password" HelperText="Repeat the password" InputType="InputType.Password"
                                  Validation="@(new Func<string, string>(PasswordMatch))"/>
            </MudForm>   
        </MudPaper>
        <MudPaper Class="pa-4 mt-4">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" DisableElevation="true" OnClick="@(()=>_form.Validate())">Validate</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Secondary" DisableElevation="true" OnClick="@(()=>_form.Reset())" Class="mx-2">Reset</MudButton>
            <MudButton Variant="Variant.Filled" DisableElevation="true" OnClick="@(()=>_form.ResetValidation())">Reset Validation</MudButton>
        </MudPaper>
    </MudItem>
    <MudItem xs="12" sm="5" md="5">
        <MudPaper Class="pa-4 mud-height-full">
            <MudText Typo="Typo.subtitle2">@($"Errors ({_errors.Length})")</MudText>
                @foreach (var error in _errors)
                {
                    <MudText Color="@Color.Error">@error</MudText>
                }
        </MudPaper>
    </MudItem>
</MudGrid>

}

@code {
    protected override async Task OnInitializedAsync()
    {
        var result = await _sessionStore.GetAsync<string>("User");
        if (result.Value is {Length: >= 1 })
        {
            _stateService.InitSystemState(result.Value);
            _stateService.IsLoggedIn = true;
        }
    }

    private async Task FakeALogin()
    {
        await _sessionStore.SetAsync("User", "Dick");
        StateHasChanged();
        _stateService.InitSystemState("Dick");
        _stateService.IsLoggedIn = true;
        _navMgr.NavigateTo("/Home");
    }
}

@code {
    bool _success;
    string[] _errors = { };
    MudTextField<string>? _pwField1;
    MudTextField<string>? _userName;
    MudForm? _form;

    private IEnumerable<string> PasswordStrength(string pw)
    {
        yield return $"Username = {_userName.Value}";
        if (string.IsNullOrWhiteSpace(pw))
        {
            yield return "Password is required!";
            yield break;
        }
        if (pw.Length < 8)
            yield return "Password must be at least of length 8";
        if (!Regex.IsMatch(pw, @"[A-Z]"))
            yield return "Password must contain at least one capital letter";
        if (!Regex.IsMatch(pw, @"[a-z]"))
            yield return "Password must contain at least one lowercase letter";
        if (!Regex.IsMatch(pw, @"[0-9]"))
            yield return "Password must contain at least one digit";
    }

    private string? PasswordMatch(string arg)
    {
        return _pwField1 != null && _pwField1.Value != arg ? "Passwords don't match" : null;
    }

}