@page "/"
@page "/Index"

@using BVPVWebServer.Dialogs
@using Severity = MudBlazor.Severity

@inject IDialogService _dialog

@inject RoleService _roleService
@inject UserService _userService
@inject NavigationManager _navMgr
@inject StateService _stateService

<PageTitle>Home Styropek ES</PageTitle>

<MudText Class="py-6" Typo="Typo.h3" Align="Align.Center">BVPV Styropek - Environmental Services</MudText>
<MudText Typo="Typo.h4" Align="Align.Center">Home Page</MudText>

<MudPaper Class="pa-6 ma-8" Outlined="true" Elevation="3">
    <MudText Typo="Typo.body1">Working on Roles to create an example of Maintenance UI</MudText>
</MudPaper>

<MudAlert Severity="MudBlazor.Severity.Info">
    System User @Environment.UserName is known as NPDES user @_stateService.UserId and Initial Dark Theme: @_stateService!.SystemState!.DarkTheme
</MudAlert>
<MudAlert Severity="Severity.Warning">
    These webpages are written different NO Refreshing is needed ever!!! In fact a Refresh will cause a LOGOUT!!!
</MudAlert>

@code
{
    private async Task ProcessLogin()
    {
        var dialog = _dialog.Show<LoginDialog>("Custom Options Dialog");
        var result = await dialog!.Result;
        if (!result.Cancelled) _stateService.IsLoggedIn = true;
        _navMgr.NavigateTo("/");
    }
}


@code {
    // Form Handling Code
    MudForm? _form;
    readonly RoleFluentValidator _roleValidator = new RoleFluentValidator();
    readonly Role _role = new Role();

    private async Task Submit()
    {
        await _form!.Validate();
    }

    // Validation Code
    public class RoleFluentValidator : AbstractValidator<Role>
    {
        public RoleFluentValidator()
        {
            RuleFor(x => x.RoleId)
                .NotEmpty()
                .Length(1, 10);

            RuleFor(x => x.RoleLevel)
                .GreaterThan(0)
                .LessThan(100);
        }

        public Func<object, string, Task<IEnumerable<string>>> ValidateValue => async (model, propertyName) =>
        {
            var result = await ValidateAsync(ValidationContext<Role>.CreateWithOptions((Role) model, x => x.IncludeProperties(propertyName)));
            return result.IsValid ? Array.Empty<string>() : result.Errors.Select(e => e.ErrorMessage);
        };
    }

}

@code{
    private string? LastPage;
    private bool IsUserLoggedIn;

    protected override async Task OnInitializedAsync()
    {
        if (!_stateService.IsLoggedIn)
        {
            if (!IsUserLoggedIn) _navMgr.NavigateTo("/LoginWindow");
        }
    }

}