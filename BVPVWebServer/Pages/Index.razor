@page "/"
@page "/Index"

@using System.ComponentModel.DataAnnotations
@inject ProtectedSessionStorage _sessionStore

@inject StateService _stateService
@inject NavigationManager _navMgr

@if (_stateService.IsLoggedIn)
{
    _navMgr.NavigateTo("/Home");
}
else
{
    <div style="max-width: 400px;">
        <EditForm Model="@_model" OnValidSubmit="OnValidSubmit">
            <DataAnnotationsValidator />
            <MudCard>
                <MudCardContent>
                    <MudTextField Label="Username" HelperText="Max. 15 characters"
                                  @bind-Value="_model.Username" For="@(() => _model.Username)" />
                    <MudTextField Label="Password" HelperText="Choose a strong password" Class="mt-3"
                                  @bind-Value="_model.Password" For="@(() => _model.Password)" InputType="InputType.Password" />
                    <MudTextField Label="Password" HelperText="Repeat the password" Class="mt-3"
                                  @bind-Value="_model.Password2" For="@(() => _model.Password2)" InputType="InputType.Password" />
                </MudCardContent>
                <MudCardActions>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Login</MudButton>
                </MudCardActions>
            </MudCard>
            <MudText Typo="Typo.body2" Align="Align.Center" Class="my-4">
                Fill out the form correctly to see the success message.
            </MudText>
        </EditForm>
    </div>
}

@code {
    protected override async Task OnInitializedAsync()
    {
        var result = await _sessionStore.GetAsync<string>("User");
        if (result.Value is {Length: >= 1 })
        {
            _stateService.InitSystemState(result.Value);
            _stateService.IsLoggedIn = true;
        }
    }

    private async Task DoTheLogin()
    {
        await _sessionStore.SetAsync("User", _model.Username!);
        StateHasChanged();
        _stateService.InitSystemState(_model.Username!);
        _stateService.IsLoggedIn = true;
        _navMgr.NavigateTo("/Home");
    }

}

@code {
    // ReSharper disable once FieldCanBeMadeReadOnly.Local
    RegisterAccountForm _model = new RegisterAccountForm();
 
    public class RegisterAccountForm
    {
        [Required]
        [StringLength(15, ErrorMessage = "Name length can't be more than 15.")]
        public string? Username { get; set; }
        
        [Required]
        [StringLength(30, ErrorMessage = "Password must be at least 8 characters long.", MinimumLength = 8)]
        public string? Password { get; set; }

        [Required]
        [Compare(nameof(Password))]
        public string? Password2 { get; set; }

    }

    private void OnValidSubmit(EditContext context)
    {
        StateHasChanged();
#pragma warning disable CS4014
        DoTheLogin();
#pragma warning restore CS4014
    }

}