@page "/"

@inject RoleService _roleService

@inject NavigationManager _navMgr
@inject StateService _state

<MudAlert Severity="MudBlazor.Severity.Info">User @Environment.UserName is known as @_state.UserId</MudAlert>
<MudAlert Severity="MudBlazor.Severity.Info">Dark Theme: @_state!.SystemState!.DarkTheme</MudAlert>
<MudAlert Severity="MudBlazor.Severity.Info">IsLoggedIn: @_state.IsLoggedIn </MudAlert>

<PageTitle>Home Styropek ES</PageTitle>

<MudText Typo="Typo.h3" Align="Align.Center">BVPV Styropek - Environmental Services</MudText>
<MudText Typo="Typo.h4" Align="Align.Center">Home Page</MudText>

<MudPaper Class="pa-6 ma-8" Outlined="true" Elevation="3">
    <MudText Typo="Typo.body1">Working on Roles to create an example of Maintenance UI</MudText>
</MudPaper>

@{
    if (!_state.IsLoggedIn)
    {
        <MudItem xs="6">
            <MudCard Outlined="true">
                <MudText Align="Align.Center" Typo="Typo.h4">Login Now:  You are not Logged In</MudText>
                <MudButton Variant="Variant.Filled" Color="Color.Tertiary" OnClick="@(ProcessLogin)">Login Button</MudButton>
            </MudCard>
        </MudItem>
    }
}

@code
{
    private void ProcessLogin()
    {
        _state.IsLoggedIn = true; 
        StateHasChanged();
        _navMgr.NavigateTo("/");
    }
}


@code {
    // Form Handling Code
    MudForm? _form;
    readonly RoleFluentValidator _roleValidator = new RoleFluentValidator();
    readonly Role _role = new Role();

    private async Task Submit()
    {
        await _form!.Validate();
    }

    // Validation Code
    public class RoleFluentValidator : AbstractValidator<Role>
    {
        public RoleFluentValidator()
        {
            RuleFor(x => x.RoleId)
                .NotEmpty()
                .Length(1, 10);

            RuleFor(x => x.RoleLevel)
                .GreaterThan(0)
                .LessThan(100);
        }

        public Func<object, string, Task<IEnumerable<string>>> ValidateValue => async (model, propertyName) =>
        {
            var result = await ValidateAsync(ValidationContext<Role>.CreateWithOptions((Role) model, x => x.IncludeProperties(propertyName)));
            return result.IsValid ? Array.Empty<string>() : result.Errors.Select(e => e.ErrorMessage);
        };
    }

}
