@page "/"
@page "/Index"
@using Severity = MudBlazor.Severity

@inject NavigationManager _navMgr

@inject ProtectedSessionStorage _sessionStore

@inject ISnackbar _snackbar

@inject StateService _stateService
@inject UserService _userService


@if (_stateService.IsLoggedIn)
{
    _navMgr.NavigateTo("/Home");
}
else
{
    <div style="max-width: 400px;">
        <EditForm Model="@_model" OnValidSubmit="OnValidSubmit">
            <DataAnnotationsValidator />
            <MudCard>
                <MudCardContent>
                    <MudTextField Label="Username"
                                  @bind-Value="_model.Username" For="@(() => _model.Username)" />
                    <MudTextField Label="Password" Class="mt-3"
                                  @bind-Value="_model.Password" For="@(() => _model.Password)" InputType="InputType.Password" />
                </MudCardContent>
                <MudCardActions>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Login</MudButton>
                </MudCardActions>
            </MudCard>
        </EditForm>
    </div>
}

@code {

    protected override async Task OnInitializedAsync()
    {
        if (_stateService.UserId != "Init")
        {
            var result = await _sessionStore.GetAsync<string>("User");
            if (result.Value is {Length: >= 1 })
            {
                _stateService.InitSystemState(result.Value);
                _stateService.IsLoggedIn = true;
            }
        }
        _snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
        _snackbar.Configuration.NewestOnTop = true;
        _snackbar.Configuration.VisibleStateDuration = 5000;
    }

    private async Task DoTheLogin()
    {
        await _sessionStore.SetAsync("User", _model.Username!);
        StateHasChanged();
        _stateService.InitSystemState(_model.Username!);
        _stateService.IsLoggedIn = true;
        _navMgr.NavigateTo("/Home");
    }

}

@code {
    // ReSharper disable once FieldCanBeMadeReadOnly.Local
    LoginForm _model = new();
 
    public class LoginForm
    {
        [Required]
        public string? Username { get; set; }
        
        [Required]
        public string? Password { get; set; }

    }

    private User? _userInfo;
    
    private void OnValidSubmit(EditContext context)
    {
        _userInfo = UserService.LoadUser(_stateService.GetAppInfo(), _model.Username!, _model.Password!, false);
        if (!_userInfo.ValidUser)
        {
            _snackbar.Add($"Username is wrong", Severity.Error);
            return;
        }
        if (!_userInfo.Enabled)
        {
            _snackbar.Add($"This user is not Enabled.  Contact your system administrator", Severity.Error);
            return;
        }
        if (!_userInfo.ValidPassword)
        {
            _snackbar.Add($"Password is wrong", Severity.Error);
            return;
        }
        StateHasChanged();
#pragma warning disable CS4014
        DoTheLogin();
#pragma warning restore CS4014
    }

}