@page "/"
@page "/Index"
@using Severity = MudBlazor.Severity

@inject NavigationManager NavMgr

@inject ProtectedSessionStorage SessionStore

@inject ISnackbar Snackbar

@inject StateService StateService

@if (StateService.IsLoggedIn)
{
    NavMgr.NavigateTo("/Home");
}
else
{
    <div style="max-width: 400px; margin-left: 15px; margin-top: 15px">
        <EditForm Model="@_model" OnValidSubmit="OnValidSubmit">
            <DataAnnotationsValidator/>
            <MudCard>
                <MudCardContent>
                    <MudTextField Label="Username"
                                  @bind-Value="_model.Username" For="@(() => _model.Username)"/>
                    <MudTextField Label="Password" Class="mt-3"
                                  @bind-Value="_model.Password" For="@(() => _model.Password)" InputType="InputType.Password"/>
                </MudCardContent>
                <MudCardActions>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Login</MudButton>
                </MudCardActions>
            </MudCard>
        </EditForm>
    </div>
    
}

@code {
    
    private string? _entryPage;

    protected override async Task OnInitializedAsync()
    {
        _entryPage = "/Home";
        await SessionStore.SetAsync("CurrentApp", "Login");
        var entry = await SessionStore.GetAsync<string>("EntryPage");
        if (entry.Value is {Length: >= 1}) _entryPage = entry.Value;
        await SessionStore.DeleteAsync("EntryPage");

        if (StateService.UserId != "Init")
        {
            var result = await SessionStore.GetAsync<string>("User");
            if (result.Value is {Length: >= 1 })
            {
                StateService.InitSystemState(result.Value);
                StateService.IsLoggedIn = true;
            }
        }
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
        Snackbar.Configuration.NewestOnTop = true;
        Snackbar.Configuration.VisibleStateDuration = 5000;
    }

    private async Task DoTheLogin()
    {
        await SessionStore.SetAsync("User", _model.Username!);
        StateService.InitSystemState(_model.Username!);
        StateService.IsLoggedIn = true;
        NavMgr.NavigateTo(_entryPage == "" ? "/Home" : _entryPage!);
        _entryPage = string.Empty;
        StateHasChanged();
    }

}

@code {
    // ReSharper disable once FieldCanBeMadeReadOnly.Local
    LoginForm _model = new();
 
    public class LoginForm
    {
        [Required]
        public string? Username { get; set; }
        
        [Required]
        public string? Password { get; set; }

    }

    private User? _userInfo;
    
    private void OnValidSubmit(EditContext context)
    {
        _userInfo = UserService.LoadUser(StateService.GetAppInfo(), _model.Username!, _model.Password!, false);
        if (!_userInfo.ValidUser)
        {
            Snackbar.Add("Username is wrong", Severity.Error);
            return;
        }
        StateService.IsEnabled = _userInfo.Enabled;
        if (!_userInfo.Enabled)
        {
            Snackbar.Add("This user is not Enabled.  Contact your system administrator", Severity.Error);
            return;
        }
        if (!_userInfo.ValidPassword)
        {
            Snackbar.Add("Password is wrong", Severity.Error);
            return;
        }
        StateHasChanged();
#pragma warning disable CS4014
        DoTheLogin();
#pragma warning restore CS4014
    }

}