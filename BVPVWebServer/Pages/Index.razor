@page "/"
@page "/Index"

@inject NavigationManager _navMgr
@using System.ComponentModel.DataAnnotations
@inject ProtectedSessionStorage _sessionStore

@inject ISnackbar _snackbar

@inject StateService _stateService
@inject UserService _userService


@if (_stateService.IsLoggedIn)
{
    _navMgr.NavigateTo("/Home");
}
else
{
    <div style="max-width: 400px;">
        <EditForm Model="@_model" OnValidSubmit="OnValidSubmit">
            <DataAnnotationsValidator />
            <MudCard>
                <MudCardContent>
                    <MudTextField Label="Username"
                                  @bind-Value="_model.Username" For="@(() => _model.Username)" />
                    <MudTextField Label="Password" Class="mt-3"
                                  @bind-Value="_model.Password" For="@(() => _model.Password)" InputType="InputType.Password" />
                </MudCardContent>
                <MudCardActions>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Login</MudButton>
                </MudCardActions>
            </MudCard>
            <MudText Typo="Typo.body2" Align="Align.Center" Class="my-4">
                Fill out the form correctly to see the success message.
            </MudText>
        </EditForm>
    </div>
}

@code {
    protected override async Task OnInitializedAsync()
    {
        var result = await _sessionStore.GetAsync<string>("User");
        if (result.Value is {Length: >= 1 })
        {
            _stateService.InitSystemState(result.Value);
            _stateService.IsLoggedIn = true;
        }
    }

    private async Task DoTheLogin()
    {
        await _sessionStore.SetAsync("User", _model.Username!);
        StateHasChanged();
        _stateService.InitSystemState(_model.Username!);
        _stateService.IsLoggedIn = true;
        _navMgr.NavigateTo("/Home");
    }

}

@code {
    // ReSharper disable once FieldCanBeMadeReadOnly.Local
    LoginForm _model = new LoginForm();
 
    public class LoginForm
    {
        [Required]
        public string? Username { get; set; }
        
        [Required]
        public string? Password { get; set; }

    }

    private User? _userInfo;
    
    private void OnValidSubmit(EditContext context)
    {
        _userInfo = new UserService().LoadUser(_stateService.GetAppInfo(), _model.Username!, _model.Password!, false);
        if (!_userInfo.ValidUser)
        {
            _snackbar.Add($"Username is {_userInfo.ValidUser}");
            return;
        }
        else if (!_userInfo.ValidPassword)
        {
            _snackbar.Add($"Password is {_userInfo.ValidPassword}");
            return;
        }
        StateHasChanged();
#pragma warning disable CS4014
        DoTheLogin();
#pragma warning restore CS4014
    }

}