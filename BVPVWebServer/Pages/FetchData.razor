@page "/fetchdata"


@inject ProtectedSessionStorage SessionStore
@inject HttpClient HttpClient

@inject StateService StateService
@inject NavigationManager NavMgr
@{
    if (!StateService.IsLoggedIn)
    {
        NavMgr.NavigateTo("/");
    }
    else
    {
        <PageTitle>Weather forecast</PageTitle>
        <MudThemeProvider IsDarkMode="StateService!.SystemState!.DarkTheme"></MudThemeProvider>
        
        <MudText Align="Align.Center" Typo="Typo.h3" GutterBottom="true">Weather forecast</MudText>
        <MudText Align="Align.Center" Class="mb-8" >This component demonstrates fetching data from the API server.</MudText>
        @if (_forecasts == null)
        {
            <MudProgressCircular Color="Color.Default" Indeterminate="true"/>
        }
        else
        {
            <MudTable Items="_forecasts" Hover="true" SortLabel="Sort By" Elevation="0" Dense="true">
                <HeaderContent>
                    <MudTh>
                        <MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<WeatherForecast, object>(x=>x.Date)">Date</MudTableSortLabel>
                    </MudTh>
                    <MudTh>
                        <MudTableSortLabel SortBy="new Func<WeatherForecast, object>(x=>x.TemperatureC)">Temp. (C)</MudTableSortLabel>
                    </MudTh>
                    <MudTh>
                        <MudTableSortLabel SortBy="new Func<WeatherForecast, object>(x=>x.TemperatureF)">Temp. (F)</MudTableSortLabel>
                    </MudTh>
                    <MudTh>
                        <MudTableSortLabel SortBy="new Func<WeatherForecast, object>(x=>x.Summary!)">Summary</MudTableSortLabel>
                    </MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Date">@context.Date</MudTd>
                    <MudTd DataLabel="Temp. (C)">@context.TemperatureC</MudTd>
                    <MudTd DataLabel="Temp. (F)">@context.TemperatureF</MudTd>
                    <MudTd DataLabel="Summary">@context.Summary</MudTd>
                </RowTemplate>
                <PagerContent>
                    <MudTablePager PageSizeOptions="new []{10, 25, 50, 100}"/>
                </PagerContent>
            </MudTable>
        }
    }
}

   
@code {
    private WeatherForecast[]? _forecasts;

    protected override async Task OnInitializedAsync()
    {
        var result = await SessionStore.GetAsync<string>("User");
        if (result.Value is not {Length: > 1 }) NavMgr.NavigateTo("/");
        _forecasts = await HttpClient.GetFromJsonAsync<WeatherForecast[]>(StateService.ApiServerBase + "weatherforecast");
    }
}