@page "/ContainerTypes"

@inject ProtectedSessionStorage SessionStore
@inject NavigationManager NavMgr
@inject StateService StateService

@inject ISnackbar Snackbar
@using Severity = MudBlazor.Severity

<PageTitle>Container Types</PageTitle>
<MudThemeProvider IsDarkMode="StateService!.SystemState!.DarkTheme"></MudThemeProvider>
@{
    if (!StateService.IsLoggedIn)
    {
        NavMgr.NavigateTo("/");
    }
    else
    {
        if (UserService.CanUserUseApp(StateService.GetAppInfo(), StateService.UserId, "ContainerTypes") == false)
        {
            <MudAlert Severity="Severity.Error">User @StateService.UserId cannot use this App based on your Role profile.</MudAlert>
        }
        else
        {
            <MudOverlay Visible="@_isProgressOverlayVisible" DarkBackground="true" Absolute="true">
                <MudGrid>
                    <MudItem>
                        <MudText Typo="Typo.h6" Color="Color.Secondary" Align="Align.Center">@_progressMessage</MudText>
                    </MudItem>
                    <MudItem>
                        <MudProgressCircular Color="Color.Secondary" Indeterminate="true"/>
                    </MudItem>
                </MudGrid>
            </MudOverlay>

            <MudText Typo="Typo.h4" Align="Align.Center">Container Types</MudText>


            <MudTable Items="@_allContainerTypes" Dense="@dense" Hover="@hover" ReadOnly="@ronly" CanCancelEdit="true" Filter="new Func<ContainerTypeCodeRec, bool>(FilterFunc)"
                      @bind-SelectedItem="selectedItem1" SortLabel="Sort By" CommitEditTooltip="Commit Edit"
                      OnCommitEditClick="@(() => Snackbar.Add("Commit Edit Handler Invoked"))" RowEditPreview="BackupItem" RowEditCancel="ResetItemToOriginalValues"
                      RowEditCommit="ItemHasBeenCommitted" IsEditRowSwitchingBlocked="@blockSwitch">
                <ToolBarContent>
                    <MudText Typo="Typo.h6">Periodic Elements</MudText>
                    <MudSpacer/>
                    <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                </ToolBarContent>
                <HeaderContent>
                    <MudTh>
                        <MudTableSortLabel SortBy="new Func<ContainerTypeCodeRec, object>(x => x.ContainerType)">Nr</MudTableSortLabel>
                    </MudTh>
                    <MudTh>
                        <MudTableSortLabel SortBy="new Func<ContainerTypeCodeRec, object>(x => x.Abrv)">Sign</MudTableSortLabel>
                    </MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Container Type">@context.ContainerType</MudTd>
                    <MudTd DataLabel="Abrv.">@context.Abrv</MudTd>
                </RowTemplate>
                <RowEditingTemplate>
                    <MudTd DataLabel="Container Type">@context.ContainerType</MudTd>
                    <MudTd DataLabel="Abrv.">
                        <MudTextField @bind-Value="@context.Abrv" Required/>
                    </MudTd>
                </RowEditingTemplate>
                <PagerContent>
                    <MudTablePager/>
                </PagerContent>
            </MudTable>

            <MudSwitch @bind-Checked="@hover" Color="Color.Primary">Hover</MudSwitch>
            <MudSwitch @bind-Checked="@dense" Color="Color.Secondary">Dense</MudSwitch>
            <MudSwitch @bind-Checked="@ronly" Color="Color.Tertiary">Read Only</MudSwitch>
            <MudSwitch @bind-Checked="@canCancelEdit" Color="Color.Info">Can Cancel Edit</MudSwitch>
            <MudSwitch @bind-Checked="@blockSwitch" Color="Color.Success">Block Edit Row Switching</MudSwitch>
            <MudText Inline="true">Selected1: @selectedItem1?.ContainerType</MudText>

            <MudExpansionPanels Style="flex: 1;">
                <MudExpansionPanel Text="Show inline-edit event log">
                    @foreach (var message in editEvents)
                    {
                        <MudText>@message</MudText>
                    }
                    @if (editEvents.Count > 0)
                    {
                        <div class="d-flex">
                            <MudSpacer/>
                            <MudButton Class="mt-3" ButtonType="ButtonType.Button" Variant="Variant.Filled" OnClick="ClearEventLog">Clear event log</MudButton>
                        </div>
                    }
                </MudExpansionPanel>
            </MudExpansionPanels>
        }
    }
}



@code
{
    private bool _isProgressOverlayVisible;
    private string? _progressMessage;
    private IEnumerable<ContainerTypeCodeRec> _allContainerTypes = new List<ContainerTypeCodeRec>(32);

    protected override async Task OnInitializedAsync()
    {
        _progressMessage = "(Re)Initializing the App";
        _isProgressOverlayVisible = true;
        var result = await SessionStore.GetAsync<string>("User");
        if (result.Value is not {Length: > 1 }) NavMgr.NavigateTo("/");
        await SessionStore.SetAsync("CurrentApp", "ContainerTypes");
        var result2 = WasteDatService.GetContainerTypes(StateService.GetAppInfo());
        if (result2.Item1.Success) _allContainerTypes = result2.Item2;
        _isProgressOverlayVisible = false;
    }
}

@code {
    private List<string> editEvents = new();
    private bool dense = false;
    private bool hover = true;
    private bool ronly = false;
    private bool canCancelEdit = false;
    private bool blockSwitch = false;
    private string searchString = "";
    private ContainerTypeCodeRec selectedItem1 = null;
    private ContainerTypeCodeRec elementBeforeEdit;
    private HashSet<ContainerTypeCodeRec> selectedItems1 = new HashSet<ContainerTypeCodeRec>();

    private void ClearEventLog()
    {
        editEvents.Clear();
    }

    private void AddEditionEvent(string message)
    {
        editEvents.Add(message);
        StateHasChanged();
    }

    private void BackupItem(object element)
    {
        elementBeforeEdit = new()
        {
            ContainerType = ((ContainerTypeCodeRec) element).ContainerType,
            Abrv = ((ContainerTypeCodeRec) element).Abrv,
        };
        AddEditionEvent($"RowEditPreview event: made a backup of Element {((ContainerTypeCodeRec) element).ContainerType}");
    }

    private void ItemHasBeenCommitted(object element)
    {
        AddEditionEvent($"RowEditCommit event: Changes to Element {((ContainerTypeCodeRec) element).ContainerType} committed");
    }

    private void ResetItemToOriginalValues(object element)
    {
        ((ContainerTypeCodeRec) element).ContainerType = elementBeforeEdit.ContainerType;
        ((ContainerTypeCodeRec) element).Abrv = elementBeforeEdit.Abrv;
        AddEditionEvent($"RowEditCancel event: Editing of Element {((ContainerTypeCodeRec) element).ContainerType} cancelled");
    }

    private bool FilterFunc(ContainerTypeCodeRec containerTypes)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (containerTypes.ContainerType!.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
    // ReSharper disable once ConvertIfStatementToReturnStatement
        if (containerTypes.Abrv!.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

}