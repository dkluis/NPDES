@page "/ContainerTypes"

@inject ProtectedSessionStorage SessionStore
@inject NavigationManager NavMgr
@inject StateService StateService

@inject ISnackbar Snackbar
@using Severity = MudBlazor.Severity

<PageTitle>Container Types</PageTitle>
<MudThemeProvider IsDarkMode="StateService!.SystemState!.DarkTheme"></MudThemeProvider>
@{
    if (!StateService.IsLoggedIn)
    {
        NavMgr.NavigateTo("/");
    }
    else
    {
        if (UserService.CanUserUseApp(StateService.GetAppInfo(), StateService.UserId, "ContainerTypes") == false)
        {
            <MudAlert Severity="Severity.Error">User @StateService.UserId cannot use this App based on your Role profile.</MudAlert>
        }
        else
        {
            <MudOverlay Visible="@_isProgressOverlayVisible" DarkBackground="true" Absolute="true">
                <MudGrid>
                    <MudItem>
                        <MudText Typo="Typo.h6" Color="Color.Secondary" Align="Align.Center">@_progressMessage</MudText>
                    </MudItem>
                    <MudItem>
                        <MudProgressCircular Color="Color.Secondary" Indeterminate="true"/>
                    </MudItem>
                </MudGrid>
            </MudOverlay>

            <MudText Typo="Typo.h4" Align="Align.Center">Container Types</MudText>

            <MudDataGrid T="ContainerTypeCodeRec" Items="@_allContainerTypes" ReadOnly="@_readOnly" EditMode="@(_isCellEditMode ? DataGridEditMode.Cell : DataGridEditMode.Form)"
                         StartedEditingItem="@StartedEditingItem" CancelledEditingItem="@CancelledEditingItem" CommittedItemChanges="@CommittedItemChanges"
                         Bordered="true" Dense="true" EditTrigger="@(_editTriggerRowClick ? DataGridEditTrigger.OnRowClick : DataGridEditTrigger.Manual)">
                <Columns>
                    <Column T="ContainerTypeCodeRec" Field="ContainerType" Title="Container Type" IsEditable="false"/>
                    <Column T="ContainerTypeCodeRec" Field="Abrv"/>
                </Columns>
            </MudDataGrid>

            <div class="d-flex flex-wrap mt-4">
                <MudSwitch @bind-Checked="@_readOnly" Color="Color.Primary">Read Only</MudSwitch>
                <div class="d-flex justify-start align-center">
                    <p class="mud-typography mud-typography-body1 mud-inherit-text mr-2">Form</p>
                    <MudSwitch @bind-Checked="@_isCellEditMode">Cell</MudSwitch>
                </div>
                <div class="d-flex justify-start align-center">
                    <p class="mud-typography mud-typography-body1 mud-inherit-text mr-2">Manual</p>
                    <MudSwitch @bind-Checked="@_editTriggerRowClick">On Row Click</MudSwitch>
                </div>
            </div>

            <MudExpansionPanels Style="flex:1">
                <MudExpansionPanel Text="Show Events">
                    @foreach (var message in _events)
                    {
                        <MudText Typo="@Typo.body2">@message</MudText>
                    }
                    @if (_events.Count > 0)
                    {
                        <div class="d-flex">
                            <MudSpacer/>
                            <MudButton Class="mt-3" ButtonType="ButtonType.Button" Variant="Variant.Filled" OnClick="@(() => _events.Clear())">Clear</MudButton>
                        </div>
                    }
                </MudExpansionPanel>
            </MudExpansionPanels>
        }
    }
}



@code
{
    private bool _isProgressOverlayVisible;
    private string? _progressMessage;
    private IEnumerable<ContainerTypeCodeRec> _allContainerTypes = new List<ContainerTypeCodeRec>(32);

    protected override async Task OnInitializedAsync()
    {
        _progressMessage = "(Re)Initializing the App";
        _isProgressOverlayVisible = true;
        var result = await SessionStore.GetAsync<string>("User");
        if (result.Value is not {Length: > 1 }) NavMgr.NavigateTo("/");
        await SessionStore.SetAsync("CurrentApp", "ExcelTry");
        var result2 = WasteDatService.GetContainerTypes(StateService.GetAppInfo());
        if (result2.Item1.Success) _allContainerTypes = result2.Item2;
        _isProgressOverlayVisible = false;
    }
}

@code {
    private bool _readOnly;
    private bool _isCellEditMode;
    private List<string> _events = new();
    private bool _editTriggerRowClick;


    // events
    void StartedEditingItem(ContainerTypeCodeRec item)
    {
        _events.Insert(0, $"Event = StartedEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
    }

    void CancelledEditingItem(ContainerTypeCodeRec item)
    {
        _events.Insert(0, $"Event = CancelledEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
    }

    void CommittedItemChanges(ContainerTypeCodeRec item)
    {
        _events.Insert(0, $"Event = CommittedItemChanges, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
    }

}