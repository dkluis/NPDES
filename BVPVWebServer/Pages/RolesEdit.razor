@page "/Roles/{PassedRoleId?}"

@inject ProtectedSessionStorage SessionStore

@using Severity = MudBlazor.Severity
@inject ISnackbar Snackbar

@inject NavigationManager NavMgr
@inject StateService StateService

@{
    if (!StateService.IsLoggedIn)
    {
        NavMgr.NavigateTo("/");
    }
    else
    {
        if (UserService.CanUserUseApp(StateService.GetAppInfo(), StateService.UserId, "Roles") == false)
        {
            <MudAlert Severity="Severity.Error">User @StateService.UserId cannot use this App based on your Role profile.</MudAlert>
        }
        else
        {
            <PageTitle>Role @PassedRoleId</PageTitle>
            <MudThemeProvider IsDarkMode="StateService!.SystemState!.DarkTheme"></MudThemeProvider>

            <MudExpansionPanels Style="flex: 1;" Elevation="4">
                <MudExpansionPanel Style="font-weight: bold" Text="Delete Role" IsInitiallyExpanded="false">
                    <MudGrid>
                        <MudItem>
                            <MudButtonGroup Color="Color.Secondary" Variant="Variant.Filled" Style="margin-top: 10px; margin-bottom: 20px; margin-left: 20px;">
                                <MudButton @onclick="OnButtonDeleteClicked" StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error">Delete User: @PassedRoleId</MudButton>
                            </MudButtonGroup>
                        </MudItem>
                    </MudGrid>
                </MudExpansionPanel>
            </MudExpansionPanels>
            <MudExpansionPanels Style="flex: 1;" Elevation="4">
                <MudExpansionPanel Style="font-weight: bold" Text="Change Role" IsInitiallyExpanded="true">
                    <div style="max-width: 400px;">
                        <MudCard Outlined="true">
                            <MudText Class="py-2" Align="Align.Center" Typo="Typo.h4">Change Role @_role.RoleId</MudText>
                            <MudForm Model="@_role" @ref="@_form" Validation="@(_roleValidator.ValidateValue)" ValidationDelay="0">
                                <MudCardContent>
                                    <MudNumericField @bind-Value="_role.RoleLevel"
                                                     For="@(() => _role.RoleLevel)"
                                                     Immediate="true"
                                                     Label="Enter Role Level">
                                    </MudNumericField>
                                    <MudItem>
                                        <MudCheckBox T="bool" @bind-Checked="_role.ReadOnly" Color="Color.Primary" Style="margin-top: 15px">Role Readonly</MudCheckBox>
                                    </MudItem>
                                    <MudItem>
                                        <MudCheckBox T="bool" @bind-Checked="_role.Enabled" Color="Color.Primary">Role Enabled</MudCheckBox>
                                    </MudItem>
                                </MudCardContent>
                            </MudForm>
                            <MudCardActions>
                                <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="@(async () => await Submit())">Submit</MudButton>
                            </MudCardActions>
                        </MudCard>
                    </div>
                </MudExpansionPanel>
            </MudExpansionPanels>
        }
    }
}


@code {

    [Parameter]
    public string? PassedRoleId { get; set; }


}

@code {

    private Role _role = new();

    protected override async Task OnInitializedAsync()
    {
        var result = await SessionStore.GetAsync<string>("User");
        if (result.Value is not {Length: > 1 }) NavMgr.NavigateTo("/");
        PassedRoleId ??= "No Role";
        await SessionStore.SetAsync("CurrentApp", "Role Details");
        await SessionStore.SetAsync("EntryPage", $"/Roles/{PassedRoleId}");
        _role = RoleService.GetRole(StateService.GetAppInfo(), PassedRoleId);
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
        Snackbar.Configuration.NewestOnTop = true;
        Snackbar.Configuration.VisibleStateDuration = 5000;
    }

}

@code
{
    private void OnButtonDeleteClicked()
    {
    }

    private void EnableChange(bool toggle)
    {
        _role.Enabled = !_role.Enabled;
        var success = RoleService.ChangeRole(StateService.GetAppInfo(), _role);
        if (!success)
        {
            Snackbar.Add("Failed to update user enablement", Severity.Error);
        }
        else
        {
            Snackbar.Add(_role.Enabled ? $"User {PassedRoleId} is set to Enabled" : $"User {PassedRoleId} is set to Disabled", Severity.Info);
        }
        StateHasChanged();
        NavMgr.NavigateTo("/Roles");
    }
}

@code
{

}

@code {
    // Form Handling Code
    MudForm? _form;
    readonly RoleFluentValidator _roleValidator = new();

    private static bool _valid;

    private async Task Submit()
    {
        await _form!.Validate();
        if (_valid)
        {
            var success = RoleService.ChangeRole(StateService.GetAppInfo(), _role);
            if (success)
            {
                _role.RoleId = "";
                _role.RoleLevel = 0;
                _role.ReadOnly = false;
                _role.Enabled = true;
                Snackbar.Add($"Role: {_role.RoleId} is changed", Severity.Info);
            }
            else
            {
                Snackbar.Add($"Changing Role: {_role.RoleId} failed", Severity.Error);
            }
        }
    }


    // Validation Code
    public class RoleFluentValidator : AbstractValidator<Role>
    {
        public RoleFluentValidator()
        {
            RuleFor(x => x.RoleId)
                .NotEmpty()
                .Length(1, 15);

            RuleFor(x => x.RoleLevel)
                .GreaterThan(0)
                .LessThan(100);
        }

        public Func<object, string, Task<IEnumerable<string>>> ValidateValue => async (model, propertyName) =>
        {
            var result = await ValidateAsync(ValidationContext<Role>.CreateWithOptions((Role) model, x => x.IncludeProperties(propertyName)));
            _valid = result.IsValid;
            return result.IsValid ? Array.Empty<string>() : result.Errors.Select(e => e.ErrorMessage);
        };
    }

}