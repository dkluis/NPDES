@page "/users"

@inject NavigationManager NavMgr
@inject ProtectedSessionStorage SessionStore

@inject ISnackbar Snackbar
@using Severity = MudBlazor.Severity

@inject StateService StateService

<PageTitle>Users</PageTitle>

@{
    if (!StateService.IsLoggedIn)
    {
        NavMgr.NavigateTo("/");
    }
    else
    {
        if (UserService.CanUserUseApp(StateService.GetAppInfo(), StateService.UserId, "Users") == false)
        {
            <MudAlert Severity="Severity.Error">User @StateService.UserId cannot use this App based on your Role profile.</MudAlert>
        }
        else
        {
            <MudThemeProvider IsDarkMode="StateService!.SystemState!.DarkTheme"></MudThemeProvider>
            <MudText Typo="Typo.h4" Align="Align.Center">User Management</MudText>
            if (StateService.IsSuperAdmin || !_noUpdatingAllowed)
            {
                <MudExpansionPanels Style="flex: 1;">
                    <MudExpansionPanel Style="font-weight: bold" Text="Add A New User">
                        <div style="max-width: 400px;">
                            <MudCard Outlined="true">
                                <MudText Typo="Typo.h5" Align="Align.Center">Add User</MudText>
                                <EditForm Model="@_addUserForm" OnValidSubmit="OnValidSubmitAdd">
                                    <DataAnnotationsValidator/>
                                    <MudGrid>
                                        <MudItem xs="12">
                                            <MudCard>
                                                <MudCardContent>
                                                    <MudTextField Label="Username" HelperText="Username: Max. 30 characters"
                                                                  @bind-Value="_addUserForm.UsernameAdd" For="@(() => _addUserForm.UsernameAdd)"/>
                                                    <MudTextField Label="Password" HelperText="Choose a strong password" Class="mt-3"
                                                                  @bind-Value="_addUserForm.Password" For="@(() => _addUserForm.Password)" InputType="InputType.Password"/>
                                                    <MudTextField Label="Password" HelperText="Repeat the password" Class="mt-3"
                                                                  @bind-Value="_addUserForm.Password2" For="@(() => _addUserForm.Password2)" InputType="InputType.Password"/>
                                                </MudCardContent>
                                                <MudCardActions>
                                                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Add User</MudButton>
                                                </MudCardActions>
                                            </MudCard>
                                        </MudItem>
                                    </MudGrid>
                                </EditForm>
                            </MudCard>
                        </div>
                    </MudExpansionPanel>
                </MudExpansionPanels>
            }
            else
            {
                <MudAlert Severity="Severity.Error">User @StateService.UserId cannot use update function based the assigned role privileges.</MudAlert>
            }

            <MudExpansionPanels Style="flex: 1;">
                <MudExpansionPanel Style="font-weight: bold" Text="Users Table" IsInitiallyExpanded="true">
                    <div style="max-width: 400px; margin-top: 20px;">
                        <MudCard Outlined="true" Elevation="4">
                            <MudCardContent>
                                <MudText Typo="Typo.h5" Align="Align.Center">Search Users</MudText>
                                <MudTextField Label="Username" HelperText="Use % for wildcard searches" @bind-Value="_username"/>
                            </MudCardContent>
                            <MudCardActions>
                                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="FillTable">Fill Table</MudButton>
                            </MudCardActions>
                        </MudCard>
                    </div>

                    <MudTable Items="@_userElements" Dense="true" Hover="true" FixedHeader="true" Height="375px"
                              Breakpoint="Breakpoint.Sm" @ref="_mudTableUsers" RowsPerPage=25>
                        <ToolBarContent>
                            <MudText Typo="Typo.h6">Users Information</MudText>
                        </ToolBarContent>
                        <ColGroup>
                            <col style="width: 50px;"/>
                            <col style="width: 20px;"/>
                            <col/>
                            <col/>
                            <col/>
                            <col/>
                        </ColGroup>
                        <HeaderContent>
                            <MudTh>
                                <MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<UserRec, object?>(x => x.UserId)">Username</MudTableSortLabel>
                            </MudTh>
                            <MudTh>
                                <MudTableSortLabel SortBy="new Func<UserRec, object?>(x => x.Enabled)">Enabled</MudTableSortLabel>
                            </MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            @* ReSharper disable once RedundantSuppressNullableWarningExpression *@
                            <MudTd DataLabel="Username">
                                @{ _linkedContext = $"/users/{context.UserId}"; }
                                <MudLink Style="font-size: small" Href=@_linkedContext Underline="Underline.Always">@context.UserId</MudLink>
                            </MudTd>
                            <MudTd DataLabel="Enabled">@context.Enabled</MudTd>
                        </RowTemplate>
                        <PagerContent>
                            <MudTablePager PageSizeOptions="new[] {25, 50, 100}"/>
                        </PagerContent>
                    </MudTable>
                </MudExpansionPanel>
            </MudExpansionPanels>
        }
    }
}

@code
{
    // For Page specific code
    private string? _username;
}

@code
{
        private const string ThisApp = "Users";
    private bool _noUpdatingAllowed;

    protected override async Task OnInitializedAsync()
    {
        var result = await SessionStore.GetAsync<string>("User");
        if (result.Value is not {Length: > 1 }) NavMgr.NavigateTo("/");
        await SessionStore.SetAsync("CurrentApp", "Users");
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
        Snackbar.Configuration.NewestOnTop = true;
        Snackbar.Configuration.VisibleStateDuration = 5000;
        CheckUserPrivileges();
        FillTable();
    }

    private void CheckUserPrivileges()
    {
        _noUpdatingAllowed = false;
        _noUpdatingAllowed = UserService.IsReadOnly(StateService.GetAppInfo(), StateService.UserId, ThisApp);
    }

    private void FillTable()
    {
        if (_username is null or "") _username = "%";
        _userElements = UserService.GetUsers(StateService.GetAppInfo(), _username!);
        _username = string.Empty;
    }
}

@code
{
    private MudTable<UserRec>? _mudTableUsers;
    private IEnumerable<UserRec> _userElements = new List<UserRec>(512);
    private string _linkedContext = string.Empty;
}

@code {
    readonly AddUserForm _addUserForm = new();
    private bool _success;

    public class AddUserForm
    {
        [Required]
        [StringLength(30, ErrorMessage = "Name length can't be more than 30.")]
        public string? UsernameAdd { get; set; }

        [Required]
        [StringLength(30, ErrorMessage = "Password must be at least 8 characters long.", MinimumLength = 8)]
        public string? Password { get; set; }

        [Required]
        [Compare(nameof(Password))]
        public string? Password2 { get; set; }
    }

    private void OnValidSubmitAdd(EditContext context)
    {
        var info = UserService.LoadUser(StateService.GetAppInfo(), _addUserForm.UsernameAdd!, "", false);
        if (info.UserId == _addUserForm.UsernameAdd)
        {
            Snackbar.Add($"User {_addUserForm.UsernameAdd} already exist", Severity.Error);
            return;
        }
        _success = UserService.AddUser(StateService.GetAppInfo(), _addUserForm.UsernameAdd!, _addUserForm.Password!);
        if (!_success)
        {
            Snackbar.Add($"Adding User {_addUserForm.UsernameAdd} has been changed", Severity.Error);
            return;
        }
        Snackbar.Add($"User {_addUserForm.UsernameAdd} has been added", Severity.Info);
        NavMgr.NavigateTo($"/users/{_addUserForm.UsernameAdd}");
        _addUserForm.UsernameAdd = "";
        _addUserForm.Password = "";
        _addUserForm.Password2 = "";
        StateHasChanged();
    }

}

@code {

}