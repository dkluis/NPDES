@page "/roles"

@inject NavigationManager NavMgr
@inject ProtectedSessionStorage SessionStore

@inject ISnackbar Snackbar
@using Severity = MudBlazor.Severity

@inject StateService StateService

@{
    if (!StateService.IsLoggedIn)
    {
        NavMgr.NavigateTo("/");
    }
    else
    {
        if (UserService.CanUserUseApp(StateService.GetAppInfo(), StateService.UserId, _thisApp) == false)
        {
            <MudAlert Severity="Severity.Error">User @StateService.UserId cannot use this App based on your Role profile.</MudAlert>
        }
        else
        {
            <MudThemeProvider IsDarkMode="StateService!.SystemState!.DarkTheme"></MudThemeProvider>
            <PageTitle>Roles</PageTitle>
            <MudText Typo="Typo.h4" Align="Align.Center">Role Management</MudText>

            if (StateService.IsSuperAdmin || !_noUpdatingAllowed)
            {
                <MudExpansionPanels Style="flex: 1;" Elevation="4">
                    <MudExpansionPanel Style="font-weight: bold" Text="Add Role" IsInitiallyExpanded="false">
                        <div style="max-width: 400px;">
                            <MudCard Outlined="true">
                                <MudText Class="py-2" Align="Align.Center" Typo="Typo.h4">Add New Role</MudText>
                                <MudForm Model="@_role" @ref="@_form" Validation="@(_roleValidator.ValidateValue)" ValidationDelay="0">
                                    <MudCardContent>
                                        <MudTextField @bind-Value="_role.RoleId"
                                                      For="@(() => _role.RoleId)"
                                                      Immediate="true"
                                                      Label="Enter Role"
                                                      HelperText="Role: Max. 15 characters">
                                        </MudTextField>
                                        <MudNumericField @bind-Value="_role.RoleLevel"
                                                         For="@(() => _role.RoleLevel)"
                                                         Immediate="true"
                                                         Label="Enter Role Level"
                                                         HelperText="Role Level: between 1 and 99">
                                        </MudNumericField>
                                        <MudCheckBox T="bool" @bind-Checked="_role.ReadOnly" Color="Color.Primary">Role Readonly</MudCheckBox>
                                    </MudCardContent>
                                </MudForm>
                                <MudCardActions>
                                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="@(async () => await Submit())">Submit</MudButton>
                                </MudCardActions>
                            </MudCard>
                        </div>
                    </MudExpansionPanel>
                </MudExpansionPanels>
            }
            else
            {
                <MudAlert Severity="Severity.Error">User @StateService.UserId cannot use update function based the assigned role privileges.</MudAlert>
            }

            <MudTable Items="@_roles" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@_loading" LoadingProgressColor="Color.Info"
                      Dense="true" Bordered="true" Striped="true" SortLabel="Sort By" Filter="new Func<Role, bool>(FilterFunc)">
                <ToolBarContent>
                    <MudText Typo="Typo.h6">Roles Table</MudText>
                    <MudSpacer></MudSpacer>
                    <MudButtonGroup Variant="Variant.Filled" Color="Color.Primary">
                        <MudButton StartIcon="@Icons.Material.Filled.Refresh" OnClick="FillTable">Refresh</MudButton>
                    </MudButtonGroup>
                    <MudSpacer></MudSpacer>
                    <MudTextField @bind-Value="_searchString" Placeholder="Search Roles" Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0">
                    </MudTextField>
                </ToolBarContent>
                <HeaderContent>
                    <MudTh>
                        <MudTableSortLabel SortBy="new Func<Role, object>(x => x.RoleId!)">Role</MudTableSortLabel>
                    </MudTh>
                    <MudTh T="int">
                        <MudTableSortLabel SortBy="new Func<Role, object>(x => x.RoleLevel)">Level</MudTableSortLabel>
                    </MudTh>
                    <MudTh>
                        <MudTableSortLabel SortBy="new Func<Role, object>(x => x.ReadOnly)">ReadOnly</MudTableSortLabel>
                    </MudTh>
                    <MudTh>
                        <MudTableSortLabel SortBy="new Func<Role, object>(x => x.Enabled)">Enabled</MudTableSortLabel>
                    </MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Role">
                        @{ _linkedContext = $"/Roles/{context.RoleId}"; }
                        <MudLink Style="font-size: small" Href=@_linkedContext Underline="Underline.Always">@context.RoleId</MudLink>
                    </MudTd>
                    <MudTd DataLabel="Level">@context.RoleLevel</MudTd>
                    <MudTd DataLabel="ReadOnly">@context.ReadOnly</MudTd>
                    <MudTd DataLabel="Enabled">@context.Enabled</MudTd>
                </RowTemplate>
                <PagerContent>
                    <MudTablePager PageSizeOptions="new[] {10, 25}"/>
                </PagerContent>
            </MudTable>
        }
    }
}


@code {
    // Form Handling Code
    MudForm? _form;
    readonly RoleFluentValidator _roleValidator = new();
    readonly Role _role = new();
    private static bool _valid;
    private string _linkedContext = string.Empty;


    private async Task Submit()
    {
        await _form!.Validate();
        if (_valid)
        {
            var success = RoleService.AddRole(StateService.GetAppInfo(), _role);
            if (success)
            {
                _role.RoleId = "";
                _role.RoleLevel = 0;
                _role.ReadOnly = false;
                _role.Enabled = true;
                Snackbar.Add($"Role: {_role.RoleId} is added", Severity.Info);
                NavMgr.NavigateTo($"/Roles/{_role.RoleId}");
            }
            else
            {
                Snackbar.Add($"Adding Role: {_role.RoleId} already exists", Severity.Error);
            }
        }
    }


    // Validation Code
    public class RoleFluentValidator : AbstractValidator<Role>
    {
        public RoleFluentValidator()
        {
            RuleFor(x => x.RoleId)
                .NotEmpty()
                .Length(1, 15);

            RuleFor(x => x.RoleLevel)
                .GreaterThan(0)
                .LessThan(99);
        }

        public Func<object, string, Task<IEnumerable<string>>> ValidateValue => async (model, propertyName) =>
        {
            var result = await ValidateAsync(ValidationContext<Role>.CreateWithOptions((Role) model, x => x.IncludeProperties(propertyName)));
            _valid = result.IsValid;
            return result.IsValid ? Array.Empty<string>() : result.Errors.Select(e => e.ErrorMessage);
        };
    }

}

@code
{
    private bool _noUpdatingAllowed;
    private string _thisApp = "Roles";
    
    protected override async Task OnInitializedAsync()
    {
        var result = await SessionStore.GetAsync<string>("User");
        if (result.Value is not {Length: > 1 }) NavMgr.NavigateTo("/");
        await SessionStore.SetAsync("CurrentApp", "Roles");
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
        Snackbar.Configuration.NewestOnTop = true;
        Snackbar.Configuration.VisibleStateDuration = 5000;
        CheckUserPrivileges();
        ProcessTableFill();
    }
    
    private void CheckUserPrivileges()
    {
        _noUpdatingAllowed = false;
        _noUpdatingAllowed = UserService.IsReadOnly(StateService.GetAppInfo(), StateService.UserId, _thisApp);
    }

    // Table Handling Code
    private bool _loading;
    private string _searchString = "";
    private string _sqlSearchString = "";
    private IEnumerable<Role> _roles = new List<Role>(64);

    protected override void OnInitialized()
    {
        _loading = true;
        _roles = RoleService.GetAllRoles(StateService.GetAppInfo(), _sqlSearchString);
        _loading = false;
    }

    private void ProcessTableFill()
    {
        _loading = true;
        if (_sqlSearchString == "") _sqlSearchString = "%";
        _roles = RoleService.GetAllRoles(StateService.GetAppInfo(), _sqlSearchString);
        _loading = false;
        _sqlSearchString = "";
    }

    private void FillTable()
    {
        _loading = true;
        _roles = RoleService.GetAllRoles(StateService.GetAppInfo(), "*");
        _loading = false;
    }
}

@code
{
    private bool FilterFunc(Role role)
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;
        if (role.RoleId.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        int number;
        try
        {
            number = int.Parse(_searchString);
        }
#pragma warning disable CS0168
        catch (Exception e)
#pragma warning restore CS0168
        {
            number = 99999;
        }
        if (role.RoleLevel.Equals(number))
            return true;
    // ReSharper disable once ConvertIfStatementToReturnStatement
        if ($"{role.RoleId}".Contains(_searchString))
            return true;
        return false;
    }
}