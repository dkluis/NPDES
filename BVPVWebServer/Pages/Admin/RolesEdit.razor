@page "/Roles/{PassedRoleId?}"

@inject ProtectedSessionStorage SessionStore

@using Severity = MudBlazor.Severity
@inject ISnackbar Snackbar

@inject NavigationManager NavMgr
@inject StateService StateService

@{
    if (!StateService.IsLoggedIn)
    {
        NavMgr.NavigateTo("/");
    }
    else
    {
        if (UserService.CanUserUseApp(StateService.GetAppInfo(), StateService.UserId, ThisApp) == false)
        {
            <MudAlert Severity="Severity.Error">User @StateService.UserId cannot use this App based on your Role profile.</MudAlert>
        }
        else
        {
            <PageTitle>Role @PassedRoleId</PageTitle>
            <MudThemeProvider IsDarkMode="StateService!.SystemState!.DarkTheme"></MudThemeProvider>
            
            if (StateService.IsSuperAdmin || !_noUpdatingAllowed)
            {
                <MudExpansionPanels Style="flex: 1;" Elevation="4">
                    <MudExpansionPanel Style="font-weight: bold" Text="Delete Role" IsInitiallyExpanded="false">
                        <MudGrid>
                            <MudItem>
                                <MudButtonGroup Color="Color.Secondary" Variant="Variant.Filled" Style="margin-top: 10px; margin-bottom: 20px; margin-left: 20px;">
                                    <MudButton @onclick="OnButtonDeleteClicked" StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error">Delete Role: @PassedRoleId</MudButton>
                                </MudButtonGroup>
                            </MudItem>
                        </MudGrid>
                    </MudExpansionPanel>
                </MudExpansionPanels>
                <MudExpansionPanels Style="flex: 1;" Elevation="4">
                    <MudExpansionPanel Style="font-weight: bold" Text="Change Role" IsInitiallyExpanded="true">
                        <div style="max-width: 400px;">
                            <MudCard Outlined="true">
                                <MudText Class="py-2" Align="Align.Center" Typo="Typo.h4">Change Role @_roleRec.RoleId</MudText>
                                <MudForm Model="@_roleRec" @ref="@_form" Validation="@(_roleValidator.ValidateValue)" ValidationDelay="0">
                                    <MudCardContent>
                                        <MudNumericField @bind-Value="_roleRec.RoleLevel"
                                                         For="@(() => _roleRec.RoleLevel)"
                                                         Immediate="true"
                                                         Label="Enter Role Level">
                                        </MudNumericField>
                                        <MudItem>
                                            <MudCheckBox T="bool" @bind-Checked="_roleRec.ReadOnly" Color="Color.Primary" Style="margin-top: 15px">Role Readonly</MudCheckBox>
                                        </MudItem>
                                        <MudItem>
                                            <MudCheckBox T="bool" @bind-Checked="_roleRec.Enabled" Color="Color.Primary">Role Enabled</MudCheckBox>
                                        </MudItem>
                                    </MudCardContent>
                                </MudForm>
                                <MudCardActions>
                                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="@(async () => await Submit())">Submit</MudButton>
                                </MudCardActions>
                            </MudCard>
                        </div>
                    </MudExpansionPanel>
                </MudExpansionPanels>
            }
            else
            {
                <MudAlert Severity="Severity.Error">User @StateService.UserId cannot use update function based the assigned role privileges.</MudAlert>
            }
        }
    }
}

<MudMessageBox @ref="DelBox" Title="Delete Warning" CancelText="Cancel">
    <MessageContent>
        <MudText Color="Color.Error">Deleting Role: @PassedRoleId CANNOT be undone!!!</MudText>
        <MudText Color="Color.Warning">Consider seting @PassedRoleId enabled to Off</MudText>
        <MudText Color="Color.Info">See Help for Enabled versus Delete explanation</MudText>
    </MessageContent>
    <YesButton>
        <MudButton OnClick="@(Delete)" Variant="Variant.Filled" Color="Color.Error" StartIcon="@Icons.Material.Filled.DeleteForever">Delete</MudButton>
    </YesButton>
</MudMessageBox>


@code {

    [Parameter]
    public string? PassedRoleId { get; set; }

}

@code {
    private const string ThisApp = "Roles";
    private RoleRec _roleRec = new();
    private bool _noUpdatingAllowed;

    protected override async Task OnInitializedAsync()
    {
        var result = await SessionStore.GetAsync<string>("User");
        if (result.Value is not {Length: > 1 }) NavMgr.NavigateTo("/");
        PassedRoleId ??= "No Role";
        await SessionStore.SetAsync("CurrentApp", "Role Details");
        await SessionStore.SetAsync("EntryPage", $"/Roles/{PassedRoleId}");
        _roleRec = RoleService.GetRole(StateService.GetAppInfo(), PassedRoleId);
        CheckUserPrivileges();
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
        Snackbar.Configuration.NewestOnTop = true;
        Snackbar.Configuration.VisibleStateDuration = 5000;
    }
    
    private void CheckUserPrivileges()
    {
        _noUpdatingAllowed = false;
        _noUpdatingAllowed = UserService.IsReadOnly(StateService.GetAppInfo(), StateService.UserId, ThisApp);
    }

}

@code
{
    MudMessageBox? DelBox { get; set; }

    private async void OnButtonDeleteClicked()
    {
        await DelBox!.Show();
        StateHasChanged();
    }
}

@code
{
    private void Delete()
    {
        if (PassedRoleId == "")
        {
            Snackbar.Add("No User was passed into this page, returned to User Page.", Severity.Error);
            NavMgr.NavigateTo("/users");
            return;
        }

        var success = RoleService.DeleteRole(StateService.GetAppInfo(), PassedRoleId!);
        if (!success)
        {
            Snackbar.Add($"Deleting Role {PassedRoleId} failed", Severity.Error);
            return;
        }

        Snackbar.Add($"Role {PassedRoleId} is deleted", Severity.Info);
        NavMgr.NavigateTo("/Roles");
    }
}

@code {
    // Form Handling Code
    MudForm? _form;
    readonly RoleFluentValidator _roleValidator = new();

    private static bool _valid;

    private async Task Submit()
    {
        await _form!.Validate();
        if (_valid)
        {
            var success = RoleService.ChangeRole(StateService.GetAppInfo(), _roleRec);
            if (success)
            {
                _roleRec.RoleId = "";
                _roleRec.RoleLevel = 0;
                _roleRec.ReadOnly = false;
                _roleRec.Enabled = true;
                Snackbar.Add($"Role: {_roleRec.RoleId} is changed", Severity.Info);
                NavMgr.NavigateTo("/Roles");
            }
            else
            {
                Snackbar.Add($"Changing Role: {_roleRec.RoleId} failed", Severity.Error);
            }
        }
    }


    // Validation Code
    public class RoleFluentValidator : AbstractValidator<RoleRec>
    {
        public RoleFluentValidator()
        {
            RuleFor(x => x.RoleId)
                .NotEmpty()
                .Length(1, 15);

            RuleFor(x => x.RoleLevel)
                .GreaterThan(0)
                .LessThan(100);
        }

        public Func<object, string, Task<IEnumerable<string>>> ValidateValue => async (model, propertyName) =>
        {
            var result = await ValidateAsync(ValidationContext<RoleRec>.CreateWithOptions((RoleRec) model, x => x.IncludeProperties(propertyName)));
            _valid = result.IsValid;
            return result.IsValid ? Array.Empty<string>() : result.Errors.Select(e => e.ErrorMessage);
        };
    }

}