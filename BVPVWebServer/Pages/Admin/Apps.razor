@page "/apps"

@inject ProtectedSessionStorage SessionStore

@using Severity = MudBlazor.Severity

@inject StateService StateService
@inject NavigationManager NavMgr

<PageTitle>Apps NPDES</PageTitle>

@{
    if (!StateService.IsLoggedIn)
    {
        NavMgr.NavigateTo("/");
    }
    else
    {
        if (UserService.CanUserUseApp(StateService.GetAppInfo(), StateService.UserId, "Apps") == false)
        {
            <MudAlert Severity="Severity.Error">User @StateService.UserId cannot use this App based on your Role profile.</MudAlert>
        }
        else
        {
            <MudThemeProvider IsDarkMode="StateService!.SystemState!.DarkTheme"></MudThemeProvider>
            <MudText Typo="Typo.h4" Align="Align.Center">App Management</MudText>

            <MudOverlay Visible="@_isProgressOverlayVisible" DarkBackground="true" Absolute="true">
                <MudGrid>
                    <MudItem>
                        <MudText Typo="Typo.h6" Color="Color.Secondary" Align="Align.Center">@_progressMessage</MudText>
                    </MudItem>
                    <MudItem>
                        <MudProgressCircular Color="Color.Secondary" Indeterminate="true"/>
                    </MudItem>
                </MudGrid>
            </MudOverlay>
            
            <MudExpansionPanels Style="flex: 1;" Elevation="4">
                <MudExpansionPanel Style="font-weight: bold" Text="Apps Without a Role Assigned (Orphans)" IsInitiallyExpanded="false">
                        <MudTable Items="@_appsWithoutRoles" Dense="true" Hover="true" FixedHeader="true" Height="375px"
                              Breakpoint="Breakpoint.Sm" @ref="_mudTableApps" RowsPerPage=25
                              Filter="new Func<AppRec, bool>(FilterFunc1)">
                        <ToolBarContent>
                            <MudText Typo="Typo.h6">All Apps without Roles (Orphans)</MudText>
                            <MudSpacer></MudSpacer>
                            <MudButtonGroup Variant="Variant.Filled" Color="Color.Primary">
                                <MudButton StartIcon="@Icons.Material.Filled.Refresh" OnClick="FillAppFunctionTable">Refresh</MudButton>
                            </MudButtonGroup>
                            <MudSpacer></MudSpacer>
                            <MudTextField @bind-Value="_searchApps" Placeholder="Search"
                                          Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search"
                                          IconSize="Size.Medium" Class="mt-0">
                            </MudTextField>
                        </ToolBarContent>
                        <ColGroup>
                            <col style="width: 30px;"/>
                            <col style="width: 50px;"/>
                            <col style="width: 20px;"/>
                            <col/>
                            <col/>
                            <col/>
                            <col/>
                        </ColGroup>
                        <HeaderContent>
                            <MudTh>
                                <MudTableSortLabel SortBy="new Func<AppRec, object?>(x => x.AppId)">App</MudTableSortLabel>
                            </MudTh>
                            <MudTh>
                                <MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<AppRec, object?>(x => x.FunctionId)">Functional Area</MudTableSortLabel>
                            </MudTh>
                            <MudTh>Report</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            @* ReSharper disable once RedundantSuppressNullableWarningExpression *@
                            <MudTd DataLabel="App">
                                @{ _linkedContext = $"/apps/{context.AppId}"; }
                                <MudLink Style="font-size: small" Href=@_linkedContext Underline="Underline.Always">@context.AppId</MudLink>
                            </MudTd>
                            <MudTd DataLabel="Function">@context.FunctionId</MudTd>
                            <MudTd DataLabel="Report">@context.ReportApp</MudTd>
                        </RowTemplate>
                        <PagerContent>
                            <MudTablePager PageSizeOptions="new[] {25, 50, 100}"/>
                        </PagerContent>
                    </MudTable>
                </MudExpansionPanel>
                
                <MudExpansionPanel Style="font-weight: bold" Text="View Apps by Function" IsInitiallyExpanded="false">
                    <MudTable Items="@_allApps" Dense="true" Hover="true" FixedHeader="true" Height="375px"
                              Breakpoint="Breakpoint.Sm" @ref="_mudTableApps" RowsPerPage=25
                              Filter="new Func<AppRec, bool>(FilterFunc1)"
                              GroupBy="@_appGroup"
                              GroupHeaderStyle="background-color:var(--mud-palette-background-grey)"
                              GroupFooterClass="mb-4">
                        <ToolBarContent>
                            <MudText Typo="Typo.h6">All Apps (Function View)</MudText>
                            <MudSpacer></MudSpacer>
                            <MudButtonGroup Variant="Variant.Filled" Color="Color.Primary">
                                <MudButton StartIcon="@Icons.Material.Filled.Refresh" OnClick="FillAppFunctionTable">Refresh</MudButton>
                            </MudButtonGroup>
                            <MudSpacer></MudSpacer>
                            <MudTextField @bind-Value="_searchApps" Placeholder="Search"
                                          Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search"
                                          IconSize="Size.Medium" Class="mt-0">
                            </MudTextField>
                        </ToolBarContent>
                        <ColGroup>
                            <col style="width: 30px;"/>
                            <col style="width: 50px;"/>
                            <col style="width: 20px;"/>
                            <col/>
                            <col/>
                            <col/>
                            <col/>
                        </ColGroup>
                        <HeaderContent>
                            <MudTh>
                                <MudTableSortLabel SortBy="new Func<AppRec, object?>(x => x.AppId)">App</MudTableSortLabel>
                            </MudTh>
                            <MudTh>
                                <MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<AppRec, object?>(x => x.FunctionId)">Functional Area</MudTableSortLabel>
                            </MudTh>
                            <MudTh>Report</MudTh>
                        </HeaderContent>
                        <GroupHeaderTemplate>
                            <MudTh Class="mud-table-cell-custom-group" colspan="3">@($"Functional Area: {context.Key}")</MudTh>
                        </GroupHeaderTemplate>
                        <RowTemplate>
                            <MudTd DataLabel="App">
                                @{ _linkedContext = $"/apps/{context.AppId}"; }
                                <MudLink  Style="font-size: small" Href=@_linkedContext Underline="Underline.Always">@context.AppId</MudLink>
                            </MudTd>
                            <MudTd DataLabel="Function">@context.FunctionId</MudTd>
                            <MudTd DataLabel="Report">@context.ReportApp</MudTd>
                        </RowTemplate>
                        <GroupFooterTemplate>
                            <MudTh Class="mud-table-cell-custom-group mud-table-cell-custom-group-footer" colspan="3"></MudTh>
                        </GroupFooterTemplate>
                        <PagerContent>
                            <MudTablePager PageSizeOptions="new[] {25, 50, 100}"/>
                        </PagerContent>
                    </MudTable>
                </MudExpansionPanel>

                <MudExpansionPanel Style="font-weight: bold" Text="View Apps by Role" IsInitiallyExpanded="true">
                    <MudTable Items="@_allAppRoles" Dense="true" Hover="true" FixedHeader="true" Height="375px"
                              Breakpoint="Breakpoint.Sm" @ref="_mudTableAppRoles" RowsPerPage=25
                              Filter="new Func<AppRoleRec, bool>(FilterAppRolesFunc)"
                              GroupBy="@_appRoleGroup"
                              GroupHeaderStyle="background-color:var(--mud-palette-background-grey)"
                              GroupFooterClass="mb-4">

                        <ToolBarContent>
                            <MudText Typo="Typo.h6">All Apps (Roles View)</MudText>
                            <MudSpacer></MudSpacer>
                            <MudButtonGroup Variant="Variant.Filled" Color="Color.Primary">
                                <MudButton StartIcon="@Icons.Material.Filled.Refresh" OnClick="FillAppRoleTable">Refresh</MudButton>
                            </MudButtonGroup>
                            <MudSpacer></MudSpacer>
                            <MudTextField @bind-Value="_searchAppRoles" Placeholder="Search"
                                          Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search"
                                          IconSize="Size.Medium" Class="mt-0">
                            </MudTextField>
                        </ToolBarContent>
                        <ColGroup>
                            <col style="width: 30px;"/>
                            <col style="width: 50px;"/>
                            <col/>
                            <col/>
                            <col/>
                            <col/>
                        </ColGroup>
                        <HeaderContent>
                            <MudTh>
                                <MudTableSortLabel SortBy="new Func<AppRoleRec, object?>(x => x.AppId)">App</MudTableSortLabel>
                            </MudTh>
                            <MudTh>
                                <MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<AppRoleRec, object?>(x => x.RoleId)">Role</MudTableSortLabel>
                            </MudTh>
                        </HeaderContent>
                        <GroupHeaderTemplate>
                            <MudTh Class="mud-table-cell-custom-group" colspan="3">@($"App: {context.Key}")</MudTh>
                        </GroupHeaderTemplate>
                        <RowTemplate>
                            @* ReSharper disable once RedundantSuppressNullableWarningExpression *@
                            <MudTd DataLabel="App">
                                @{ _linkedContext = $"/apps/{context.AppId}"; }
                                <MudLink Style="font-size: small" Href=@_linkedContext Underline="Underline.Always">@context.AppId</MudLink>
                            </MudTd>
                            <MudTd DataLabel="Function">@context.RoleId</MudTd>
                        </RowTemplate>
                        <GroupFooterTemplate>
                            <MudTh Class="mud-table-cell-custom-group mud-table-cell-custom-group-footer" colspan="3"></MudTh>
                        </GroupFooterTemplate>
                        <PagerContent>
                            <MudTablePager PageSizeOptions="new[] {25, 50, 100}"/>
                        </PagerContent>
                    </MudTable>
                </MudExpansionPanel>
            </MudExpansionPanels>
        }
    }
}

@code
{
    
    private MudTable<AppRec>? _mudTableApps;
    private List<AppRec> _allApps = new(128);
    private string _linkedContext = string.Empty;
    private List<AppRoleRec> _allAppRoles = new(32);
    private List<AppRec> _appsWithoutRoles = new(128);
    private MudTable<AppRoleRec>? _mudTableAppRoles;
    
    private bool _isProgressOverlayVisible;
    private string? _progressMessage;


    protected override async Task OnInitializedAsync()
    {
        _progressMessage = "(Re)Initializing the App";
        _isProgressOverlayVisible = true;
        var result = await SessionStore.GetAsync<string>("User");
        if (result.Value is not {Length: > 1 }) NavMgr.NavigateTo("/");
        await SessionStore.SetAsync("CurrentApp", "Apps");
        FillAppFunctionTable();
        FillAppRoleTable();
        FillAppsWithoutRoles();
        _isProgressOverlayVisible = false;
    }

    void FillAppFunctionTable()
    {
        _allApps = AppService.GetAllApps(StateService.GetAppInfo());
    }

    private void FillAppRoleTable()
    {
        _allAppRoles = AppService.GetAllAppRoles(StateService.GetAppInfo());
    }

    private void FillAppsWithoutRoles()
    {
        _appsWithoutRoles = AppService.GetAppsWithoutRoles(StateService.GetAppInfo());
    }
}

@code
{
    private readonly TableGroupDefinition<AppRec> _appGroup = new()
    {
        GroupName = "Functional Area",
        Indentation = true,
        Expandable = true,
        IsInitiallyExpanded = true,
        Selector = e => e.FunctionId
    };

    private string _searchApps = string.Empty;
    private bool FilterFunc1(AppRec apps) => FilterFunc(apps, _searchApps);

    private static bool FilterFunc(AppRec apps, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (apps.AppId.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
    // ReSharper disable once ConvertIfStatementToReturnStatement
        if (apps.FunctionId.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }
}

@code
{
    private readonly TableGroupDefinition<AppRoleRec> _appRoleGroup = new()
    {
        GroupName = "App",
        Indentation = true,
        Expandable = true,
        IsInitiallyExpanded = false,
        Selector = e => e.AppId
    };

    private string _searchAppRoles = string.Empty;
    private bool FilterAppRolesFunc(AppRoleRec appRoles) => FilterAppRoleMainFunc(appRoles, _searchAppRoles);

    private static bool FilterAppRoleMainFunc(AppRoleRec appRoles, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (appRoles.AppId.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
    // ReSharper disable once ConvertIfStatementToReturnStatement
        if (appRoles.RoleId.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }
}