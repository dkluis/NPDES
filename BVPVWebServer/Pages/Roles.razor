@using FluentValidation
@using BVPVWebServer.Data
@inject RoleService _roleService

@page "/roles"

<PageTitle>Roles</PageTitle>

<MudText Typo="Typo.h4" Align="Align.Center">Role Management</MudText>

<MudItem xs="3">
    <MudCard Outlined="true">
        <MudText Align="Align.Center" Typo="Typo.h4">Add New Role</MudText>
        <MudForm Model="@_role" @ref="@_form" Validation="@(_roleValidator.ValidateValue)" ValidationDelay="0">
            <MudCardContent>
                <MudTextField @bind-Value="_role.RoleId"
                              For="@(() => _role.RoleId)"
                              Immediate="true"
                              Label="Enter Role"/>
                <MudNumericField @bind-Value="_role.RoleLevel"
                                 For="@(() => _role.RoleLevel)"
                                 Immediate="true"
                                 Label="Enter Role Level"/>
                <MudText Style="padding-top: 10px">Is Role ReadOnly Access: </MudText>
                <MudRadioGroup @bind-Selection="_role.ReadOnly"
                               For="@(() => _role.ReadOnly)"
                               Label="Select ReadOnly">
                    <MudRadio Class="pa-2" Option="false" Color="Color.Primary" Dense="true">False</MudRadio>
                    <MudRadio class="pa-2" Option="true" Color="Color.Secondary" Dense="true">True</MudRadio>
                </MudRadioGroup>
            </MudCardContent>
        </MudForm>
        <MudCardActions>
            <MudButton Variant="Variant.Filled" Color="Color.Secondary" Class="ml-auto" OnClick="@(async () => await Submit())">Submit</MudButton>
        </MudCardActions>
    </MudCard>
</MudItem>

@code {

    /*
    [Inject]
    ISnackbar Snackbar { get; set; }
    */

    MudForm? _form;

    readonly RoleFluentValidator _roleValidator = new RoleFluentValidator();


    readonly Role _role = new Role();

    private async Task Submit()
    {
        await _form!.Validate();

    /*
        if (form.IsValid)
        {
            Snackbar.Add("Submitted!");
        }
        */
    }

    public class RoleFluentValidator : AbstractValidator<Role>
    {
        public RoleFluentValidator()
        {
            RuleFor(x => x.RoleId)
                .NotEmpty()
                .Length(1, 10);

            RuleFor(x => x.RoleLevel)
                .GreaterThan(0)
                .LessThan(100);
        }

        public Func<object, string, Task<IEnumerable<string>>> ValidateValue => async (model, propertyName) =>
        {
            var result = await ValidateAsync(ValidationContext<Role>.CreateWithOptions((Role) model, x => x.IncludeProperties(propertyName)));
            return result.IsValid ? Array.Empty<string>() : result.Errors.Select(e => e.ErrorMessage);
        };
    }

}