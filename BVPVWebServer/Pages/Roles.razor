@page "/roles"

@using FluentValidation
@using BVPVWebServer.Data
@inject RoleService _roleService
@inject StateService _state
@{
    _state.InitUserInfo("Dick");
}

<PageTitle>Roles</PageTitle>

<MudText Typo="Typo.h4" Align="Align.Center">Role Management</MudText>
<MudText Typo="Typo.caption">DarkTheme Info is: @_state.SystemState!.DarkTheme</MudText>

<MudItem xs="6">
    <MudCard Outlined="true">
        <MudText Align="Align.Center" Typo="Typo.h4">Add New Role</MudText>
        <MudForm Model="@_role" @ref="@_form" Validation="@(_roleValidator.ValidateValue)" ValidationDelay="0">
            <MudCardContent>
                <MudTextField @bind-Value="_role.RoleId"
                              For="@(() => _role.RoleId)"
                              Immediate="true"
                              Label="Enter Role"/>
                <MudNumericField @bind-Value="_role.RoleLevel"
                                 For="@(() => _role.RoleLevel)"
                                 Immediate="true"
                                 Label="Enter Role Level"/>
                <MudText Style="padding-top: 10px">Is Role ReadOnly Access: </MudText>
                <MudRadioGroup @bind-Selection="_role.ReadOnly"
                               For="@(() => _role.ReadOnly)"
                               Label="Select ReadOnly">
                    <MudRadio Class="pa-2" Option="false" Color="Color.Primary" Dense="true">False</MudRadio>
                    <MudRadio class="pa-2" Option="true" Color="Color.Secondary" Dense="true">True</MudRadio>
                </MudRadioGroup>
            </MudCardContent>
        </MudForm>
        <MudCardActions>
            <MudButton Variant="Variant.Filled" Color="Color.Secondary" Class="ml-auto" OnClick="@(async () => await Submit())">Submit</MudButton>
        </MudCardActions>
    </MudCard>
</MudItem>

<MudText>@_Init_Info</MudText>


<MudTable Items="@_roles" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@_loading" LoadingProgressColor="Color.Info"
          Dense="true" Bordered="true" Striped="true" SortLabel="Sort By" Filter="new Func<Role, bool>(FilterFunc)">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Available Roles</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" 
                          AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
    <HeaderContent>
        <MudTh><MudTableSortLabel SortBy="new Func<Role, object>(x => x.RoleId)">Role</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<Role, object>(x => x.RoleLevel)">Level</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<Role, object>(x => x.ReadOnly)">ReadOnly</MudTableSortLabel></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Role">@context.RoleId</MudTd>
        <MudTd DataLabel="Level">@context.ReadOnly</MudTd>
        <MudTd DataLabel="ReadOnly">@context.ReadOnly</MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager PageSizeOptions="new int[] {10, 25}"/>
    </PagerContent>
</MudTable>


@code {
    // Form Handling Code
    MudForm? _form;
    readonly RoleFluentValidator _roleValidator = new RoleFluentValidator();
    readonly Role _role = new Role();

    private async Task Submit()
    {
        await _form!.Validate();
    }

    // Validation Code
    public class RoleFluentValidator : AbstractValidator<Role>
    {
        public RoleFluentValidator()
        {
            RuleFor(x => x.RoleId)
                .NotEmpty()
                .Length(1, 10);

            RuleFor(x => x.RoleLevel)
                .GreaterThan(0)
                .LessThan(100);
        }

        public Func<object, string, Task<IEnumerable<string>>> ValidateValue => async (model, propertyName) =>
        {
            var result = await ValidateAsync(ValidationContext<Role>.CreateWithOptions((Role) model, x => x.IncludeProperties(propertyName)));
            return result.IsValid ? Array.Empty<string>() : result.Errors.Select(e => e.ErrorMessage);
        };
    }
}

@code
{
    // Table Handling Code
    private string _Init_Info;
    private bool _loading;
    private string searchString = "";
    private IEnumerable<Role> _roles = new List<Role>();

    protected override async Task OnInitializedAsync()
    {
        _loading = true;
        _roles = await _roleService.GetAllRoles();
        _Init_Info = "DEBUGGING Info ---->>>> Async GetAllRoles has returned: " + _roles.Count() + " Records";
        _loading = false;
    }
}
@code
{
    private bool FilterFunc(Role role)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (role.RoleId.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{role.RoleId}".Contains(searchString))
            return true;
        return false;
    }
}