@page "/Uploads"


@inject ProtectedSessionStorage SessionStore
@inject NavigationManager NavMgr

@inject ISnackbar Snackbar
@using Severity = MudBlazor.Severity

@using Libraries
@inject StateService StateService
@inject DownloadService DownloadService

@{ GetDirFiles(); }

@{
    if (!StateService.IsLoggedIn)
    {
        NavMgr.NavigateTo("/");
    }
    else
    {
        if (UserService.CanUserUseApp(StateService.GetAppInfo(), StateService.UserId, "Uploads") == false)
        {
            <MudAlert Severity="Severity.Error">User @StateService.UserId cannot use this App based on your Role profile.</MudAlert>
        }
        else
        {
            <MudThemeProvider IsDarkMode="StateService!.SystemState!.DarkTheme"></MudThemeProvider>
            <PageTitle>Uploads NPDES</PageTitle>

            <MudOverlay Visible="@_isProgressOverlayVisible" DarkBackground="true" Absolute="true">
                <MudGrid>
                    <MudItem>
                        <MudText Typo="Typo.h6" Color="Color.Secondary" Align="Align.Center">@_progressMessage</MudText>
                    </MudItem>
                    <MudItem>
                        <MudProgressCircular Color="Color.Secondary" Indeterminate="true"/>
                    </MudItem>
                </MudGrid>
            </MudOverlay>

            <MudText Typo="Typo.h4" Align="Align.Center">Uploads</MudText>

            <InputFile id="fileInput" OnChange="UploadFiles" hidden accept=".xlsx, .xls"/>

            <MudButton HtmlTag="label"
                       Variant="Variant.Filled"
                       Color="Color.Primary"
                       StartIcon="@Icons.Material.Filled.FileUpload"
                       for="fileInput">
                Upload File
            </MudButton>
            <MudExpansionPanels Style="flex: 1;" Elevation="4">
            </MudExpansionPanels>
        }
    }
}

@code
{
    private FileHandling? _fileHandling;
    private bool _isProgressOverlayVisible;
    private string? _progressMessage;

    protected override async Task OnInitializedAsync()
    {
        _progressMessage = "(Re)Initializing the App";
        _isProgressOverlayVisible = true;
        var result = await SessionStore.GetAsync<string>("User");
        if (result.Value is not {Length: > 1 }) NavMgr.NavigateTo("/");
        await SessionStore.SetAsync("CurrentApp", "ExcelTry");
        _fileHandling = new FileHandling(StateService.GetAppInfo());
        _isProgressOverlayVisible = false;
    }
}

@code
{
    readonly IList<IBrowserFile?> _files = new List<IBrowserFile?>();
    IBrowserFile? _fileToUpload;

    private async void UploadFiles(InputFileChangeEventArgs e)
    {
        _progressMessage = "Loading the File";
        _isProgressOverlayVisible = true;

        foreach (var file in e.GetMultipleFiles())
        {
            _files.Add(file);
        }

        if (_files.Count > 1 || _files.Count == 0)
        {
            Snackbar.Add($"No File selected", Severity.Info);
        }

        _fileToUpload = _files[0];
        var exists = FileHandling.CheckFileExist(_fileToUpload);
        if (exists)
        {
            Snackbar.Add($"File: {_fileToUpload.Name} sized: {_fileToUpload.Size / 1000} KB ALREADY is imported", Severity.Error);
        }
        else
        {
            var result = await _fileHandling!.ImportFile(_fileToUpload);
            if (result.Success)
            {
                Snackbar.Add($"File: {_fileToUpload.Name} sized: {_fileToUpload.Size / 1000} KB is imported", Severity.Info);
                var recordResult = DownloadService.RecordDownload(StateService.GetAppInfo(), StateService.UserId!, _fileToUpload.Name);
                if (!recordResult.Success) Snackbar.Add($"File: {_fileToUpload.Name} Recording Error: {result.Message}", Severity.Error);
            }
            else
            {
                Snackbar.Add($"File: {_fileToUpload.Name} Error: {result.Message}", Severity.Error);
            }
        }
        
        _isProgressOverlayVisible = false;
        _files.Clear();
        StateHasChanged();
    }
}

@code
{
    private void GetDirFiles()
    {
        var result = FileHandling.GetFilesInDir($"{BaseConfig.ImportedPath}");
    }
}