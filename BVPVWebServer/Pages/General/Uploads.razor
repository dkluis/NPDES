@page "/Uploads"

@using System.Globalization

@inject ProtectedSessionStorage SessionStore
@inject NavigationManager NavMgr
@inject StateService StateService

@inject ISnackbar Snackbar
@using Severity = MudBlazor.Severity

<PageTitle>Uploads NPDES</PageTitle>
<MudThemeProvider IsDarkMode="StateService!.SystemState!.DarkTheme"></MudThemeProvider>
@{
    if (!StateService.IsLoggedIn)
    {
        NavMgr.NavigateTo("/");
    }
    else
    {
        if (UserService.CanUserUseApp(StateService.GetAppInfo(), StateService.UserId, "Uploads") == false)
        {
            <MudAlert Severity="Severity.Error">User @StateService.UserId cannot use this App based on your Role profile.</MudAlert>
        }
        else
        {
            //Page Detail

            <MudOverlay Visible="@_isProgressOverlayVisible" DarkBackground="true" Absolute="true">
                <MudGrid>
                    <MudItem>
                        <MudText Typo="Typo.h6" Color="Color.Secondary" Align="Align.Center">@_progressMessage</MudText>
                    </MudItem>
                    <MudItem>
                        <MudProgressCircular Color="Color.Secondary" Indeterminate="true"/>
                    </MudItem>
                </MudGrid>
            </MudOverlay>

            <MudText Typo="Typo.h4" Align="Align.Center">Uploads</MudText>

            <InputFile id="fileInput" OnChange="UploadFiles" hidden accept=".xlsx, .xls"/>
            <MudButton HtmlTag="label"
                       Variant="Variant.Filled"
                       Color="Color.Primary"
                       StartIcon="@Icons.Material.Filled.FileUpload"
                       for="fileInput">
                Upload File
            </MudButton>
            <MudExpansionPanels Style="flex: 1;" Elevation="4">
                <MudExpansionPanel Style="font-weight: bold" Text="Downloads Table" IsInitiallyExpanded="true">
                    <MudTable Items="@_allDownloadRecs" Hover="true" Breakpoint="Breakpoint.Sm"
                              Dense="true" Striped="true" 
                              SortLabel="Sort By" Filter="new Func<DownloadRec, bool>(FilterFunc)" 
                              RowsPerPage=25 FixedHeader="true" Height="500px">
                        <ToolBarContent>
                            <MudText Typo="Typo.h6">Downloads Table</MudText>
                            <MudSpacer></MudSpacer>
                            <MudButtonGroup Variant="Variant.Filled" Color="Color.Primary">
                                <MudButton StartIcon="@Icons.Material.Filled.Refresh" OnClick="FillDownloads">Refresh</MudButton>
                            </MudButtonGroup>
                            <MudSpacer></MudSpacer>
                            <MudTextField @bind-Value="_searchString" Placeholder="Search Downloads" Adornment="Adornment.Start"
                                          AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0">
                            </MudTextField>
                        </ToolBarContent>
                        <HeaderContent>
                            <MudTh>
                                <MudTableSortLabel SortBy="new Func<DownloadRec, object>(x => x.User!)">User</MudTableSortLabel>
                            </MudTh>
                            <MudTh T="int">
                                <MudTableSortLabel SortBy="new Func<DownloadRec, object>(x => x.FileName!)">File Name</MudTableSortLabel>
                            </MudTh>
                            <MudTh>
                                <MudTableSortLabel SortBy="new Func<DownloadRec, object>(x => x.Function!)">Function</MudTableSortLabel>
                            </MudTh>
                            <MudTh>
                                <MudTableSortLabel SortBy="new Func<DownloadRec, object>(x => x.DownloadDateTime)">Download DT</MudTableSortLabel>
                            </MudTh>
                            <MudTh>Validate DT</MudTh>
                            <MudTh>Process DT</MudTh>
                            <MudTh>File Exists</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="User">@context.User</MudTd>
                            <MudTd DataLabel="File Name">
                                @{ _linkedContext = $"/Uploads/{context.FileName}"; }
                                <MudLink Style="font-size: small" Href=@_linkedContext Underline="Underline.Always">@context.FileName</MudLink>
                            </MudTd>
                            <MudTd DataLabel="Function">@context.Function</MudTd>
                            <MudTd DataLabel="Download Date">@context.DownloadDateTime</MudTd>
                            <MudTd DataLabel="Validate Date">@context.ValidateDateTime</MudTd>
                            <MudTd DataLabel="Process Date">@context.ProcessDateTime</MudTd>
                            @{ CheckFileStillThere(context); }
                            <MudTd DataLabel="Still Exist">@_fileStillExist</MudTd>
                        </RowTemplate>
                        <PagerContent>
                            <MudTablePager PageSizeOptions="new[] {25, 50, 100}"/>
                        </PagerContent>
                    </MudTable>
                </MudExpansionPanel>
            </MudExpansionPanels>
        }
    }
}

@code
{
    private bool _isProgressOverlayVisible;
    private string? _progressMessage;
    private bool _fileStillExist;
    private string _searchString = "";
    private string _linkedContext = string.Empty;
    private List<DownloadRec> _allDownloadRecs = new (1024);

    protected override async Task OnInitializedAsync()
    {
        _progressMessage = "(Re)Initializing the App";
        _isProgressOverlayVisible = true;
        var result = await SessionStore.GetAsync<string>("User");
        if (result.Value is not {Length: > 1 }) NavMgr.NavigateTo("/");
        await SessionStore.SetAsync("CurrentApp", "ExcelTry");
        FillDownloads();
        _isProgressOverlayVisible = false;
    }
}

@code
{
    private void FillDownloads()
    {
        _isProgressOverlayVisible = true;
        var result = DownloadService.GetAllDownloadRecs(StateService.GetAppInfo());
        _allDownloadRecs = result.Item2;
        StateHasChanged();
        _isProgressOverlayVisible = false;
    }
}

@code
{
    readonly IList<IBrowserFile?> _files = new List<IBrowserFile?>();
    IBrowserFile? _fileToUpload;

    private async void UploadFiles(InputFileChangeEventArgs e)
    {
        _progressMessage = "Loading the File";
        _isProgressOverlayVisible = true;

        foreach (var file in e.GetMultipleFiles())
        {
            _files.Add(file);
        }

        if (_files.Count is > 1 or 0)
        {
            Snackbar.Add("No File selected", Severity.Info);
            FreeUpload();
            return;
        }

        _fileToUpload = _files[0];
        var exists = FileHandling.CheckFileExist(_fileToUpload!.Name, "Download");
        if (exists)
        {
            Snackbar.Add($"File: {_fileToUpload!.Name} sized: {_fileToUpload.Size / 1000} KB ALREADY is imported", Severity.Error);
            FreeUpload();
            return;
        }

        var result = await DownloadService.ProcessDownloadAsync(StateService.GetAppInfo(), StateService.UserId!, _fileToUpload!);
        if (result.Success)
        {
            Snackbar.Add($"File: {_fileToUpload!.Name} sized: {_fileToUpload.Size / 1000} KB is imported by {StateService.UserId}", Severity.Info);
        }
        else
        {
            Snackbar.Add($"File: {_fileToUpload!.Name} Error: {result.Message}", Severity.Error);
        }

        FreeUpload();
    }

    private void FreeUpload()
    {
        _isProgressOverlayVisible = false;
        _files.Clear();
        StateHasChanged();
    }
}

@code
{
    private bool FilterFunc(DownloadRec downloadRec)
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;
        if (downloadRec.User!.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;
    // ReSharper disable once ConvertIfStatementToReturnStatement
        if (downloadRec.DownloadDateTime.ToString(CultureInfo.InvariantCulture).Contains(_searchString))
            return true;

        return false;
    }
}


@code
{
    private void GetDirFiles()
    {
        var result = FileHandling.GetFilesInDir($"{BaseConfig.DownloadsPath}");
    }
}

@code
{
    private void CheckFileStillThere(DownloadRec dlRec)
    {
        var directory = "Downloads";
        if (dlRec.ValidateDateTime.Year != 0001) directory = "Validated";
        if (dlRec.ProcessDateTime.Year != 0001) directory = "Processed";
        _fileStillExist = FileHandling.CheckFileExist(dlRec.FileName!, directory);
    }
}
