@page "/ExcelTry"

@inject ProtectedSessionStorage SessionStore
@inject ISnackbar Snackbar

@using Severity = MudBlazor.Severity

@inject StateService StateService
@inject NavigationManager NavMgr

@{
    if (!StateService.IsLoggedIn)
    {
        NavMgr.NavigateTo("/");
    }
    else
    {
        if (UserService.CanUserUseApp(StateService.GetAppInfo(), StateService.UserId, "ExcelTry") == false)
        {
            <MudAlert Severity="Severity.Error">User @StateService.UserId cannot use this App based on your Role profile.</MudAlert>
        }
        else
        {
            <MudThemeProvider IsDarkMode="StateService!.SystemState!.DarkTheme"></MudThemeProvider>
            <PageTitle>ExcelTry NPDES</PageTitle>

            <MudText Typo="Typo.h4" Align="Align.Center">Excel Try</MudText>

            <InputFile id="fileInput" OnChange="UploadFiles" hidden multiple accept=".xlsx, .xls"/>

            <MudButton HtmlTag="label"
                       Variant="Variant.Filled"
                       Color="Color.Primary"
                       StartIcon="@Icons.Material.Filled.FileUpload"
                       for="fileInput">
                Upload Excel Spreadsheet(s)
            </MudButton>
            
            <MudPaper @ondragenter="@SetDragClass" @ondragleave="@ClearDragClass" @ondragend="@ClearDragClass" Height="200px" Outlined="true" Class="@_dragClass">
                @if (!_clearing)
                {
                    <InputFile OnChange="OnInputFileChanged" multiple  class="absolute mud-width-full mud-height-full overflow-hidden z-2" style="opacity:0;" />
                }
                <MudText Typo="Typo.h6">Drag and drop files here or click</MudText>
                @foreach (var file in _fileNames)
                {
                    <MudChip Color="Color.Dark" Text="@file" />
                }
            </MudPaper>
            <MudToolBar DisableGutters="true" Class="gap-4">
                <MudButton OnClick="Upload" Disabled="@(!_fileNames.Any())" Color="Color.Primary" Variant="Variant.Filled">Upload</MudButton>
                <MudButton OnClick="Clear" Disabled="@(!_fileNames.Any())" Color="Color.Error" Variant="Variant.Filled">Clear</MudButton>
            </MudToolBar>
        }
    }
}

@code
{

    protected override async Task OnInitializedAsync()
    {
        var result = await SessionStore.GetAsync<string>("User");
        if (result.Value is not {Length: > 1 }) NavMgr.NavigateTo("/");
        await SessionStore.SetAsync("CurrentApp", "ExcelTry");
    }
}

@if (_files != null)
{
    <MudText Typo="@Typo.h6">@_files.Count() File@(_files.Count() == 1 ? "" : "s"):</MudText>
    <MudList>
        @foreach (var file in _files)
        {
            <MudListItem Icon="@Icons.Filled.AttachFile" @key="@file">
                @file.Name <code>@file.Size bytes</code>
            </MudListItem>
        }
    </MudList>
}
@code
{
    readonly IList<IBrowserFile> _files = new List<IBrowserFile>();
    private async void UploadFiles(InputFileChangeEventArgs e)
    {
        foreach (var file in e.GetMultipleFiles())
        {
            _files.Add(file);
        }
        foreach (var file in _files)
        {
            await using FileStream fs = new($"/Volumes/HD-Data-CA-Server/BVPV/NPDES-System/Imports/{file.Name}", FileMode.Create);
            await file.OpenReadStream().CopyToAsync(fs);
        }
    }
}

@code {
    
    private bool _clearing = false;
    private static string DefaultDragClass = "relative rounded-lg border-2 border-dashed pa-4 mt-4 mud-width-full mud-height-full";
    private string _dragClass = DefaultDragClass;
    private readonly List<string> _fileNames = new List<string>();

    private void OnInputFileChanged(InputFileChangeEventArgs e)
    {
        ClearDragClass();
        foreach(var file in e.GetMultipleFiles())
        {
            _fileNames.Add(file.Name);
            _files.Add(file);
        }
    }

    private async Task Clear()
    {
        _clearing = true;
        _fileNames.Clear();
        _files.Clear();
        ClearDragClass();
        await Task.Delay(100);
        _clearing = false;
    }
    private async void Upload()
    {
        foreach (var file in _files)
        {
            await using FileStream fs = new($"/Volumes/HD-Data-CA-Server/BVPV/NPDES-System/Imports/{file.Name}", FileMode.Create);
            await file.OpenReadStream().CopyToAsync(fs);
        }

        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
        Snackbar.Add("File(s) are uploaded", Severity.Info);
        await Clear();
        StateHasChanged();
    }

    private void SetDragClass()
    {
        _dragClass = $"{DefaultDragClass} mud-border-primary";
    }

    private void ClearDragClass()
    {
        _dragClass = DefaultDragClass;
    }
}

