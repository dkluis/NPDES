@page "/users"

@inject NavigationManager _navMgr

@using Severity = MudBlazor.Severity

@inject ProtectedSessionStorage _sessionStore
@inject StateService _stateService
@inject UserService _userService

<PageTitle>Users</PageTitle>

@{
    if (!_stateService.IsLoggedIn)
    {
        _navMgr.NavigateTo("/");
    }
    else
    {
        if (UserService.CanUserUseApp(_stateService.GetAppInfo(), _stateService.UserId, "users") == false)
        {
            <MudAlert Severity="Severity.Error">User @_stateService.UserId cannot use this App based on your Role profile.</MudAlert>
        }
        else
        {
            <MudText Typo="Typo.h4" Align="Align.Center">User Management</MudText>
            <MudItem>
                <MudButtonGroup Color="Color.Primary" Variant="Variant.Filled" Style="margin-bottom: 10px">
                    <MudButton @onclick="ShowAdd" StartIcon="@Icons.Material.Filled.Add">Add</MudButton>
                    <MudButton @onclick="ShowView" StartIcon="@Icons.Material.Filled.History">Users</MudButton>
                    <MudButton StartIcon="@Icons.Custom.Uncategorized.Bacteria">Assign Roles</MudButton>
                </MudButtonGroup>
            </MudItem>

            if (_add)
            {
                <div style="max-width: 400px;">
                    <MudCard Outlined="true">
                        <MudText Typo="Typo.h5" Align="Align.Center">Add User</MudText>
                        <EditForm Model="@_addUserForm" OnValidSubmit="OnValidSubmitAdd">
                            <DataAnnotationsValidator/>
                            <MudGrid>
                                <MudItem xs="12">
                                    <MudCard>
                                        <MudCardContent>
                                            <MudTextField Label="Username" HelperText="Max. 30 characters"
                                                          @bind-Value="_addUserForm.UsernameAdd" For="@(() => _addUserForm.UsernameAdd)"/>
                                            <MudTextField Label="Password" HelperText="Choose a strong password" Class="mt-3"
                                                          @bind-Value="_addUserForm.Password" For="@(() => _addUserForm.Password)" InputType="InputType.Password"/>
                                            <MudTextField Label="Password" HelperText="Repeat the password" Class="mt-3"
                                                          @bind-Value="_addUserForm.Password2" For="@(() => _addUserForm.Password2)" InputType="InputType.Password"/>
                                        </MudCardContent>
                                        <MudCardActions>
                                            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Add User</MudButton>
                                        </MudCardActions>
                                    </MudCard>
                                </MudItem>
                            </MudGrid>
                        </EditForm>
                        <MudText Color="Color.Error" Align="Align.Center">@AddErrors</MudText>
                    </MudCard>
                </div>
            }
            if (_view)
            {
                <!---This is the Table View Area -->
                <div style="max-width: 400px;">
                    <MudCard Outlined="true" Elevation="2">
                        <MudCardContent>
                            <MudText Typo="Typo.h5" Align="Align.Center">Search Users</MudText>
                            <MudTextField Label="Username" HelperText="Use % for wildcard searches" @bind-Value="_username"/>
                        </MudCardContent>
                        <MudCardActions>
                            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto"
                                       OnClick="FillTable">
                                Fill Table
                            </MudButton>
                        </MudCardActions>
                    </MudCard>
                </div>

                <MudTable Items="@_userElements" Dense="true" Hover="true" FixedHeader="true" FixedFooter="true" Height="350px"
                          Breakpoint="Breakpoint.Sm" @ref="_mudTableUsers" @bind-SelectedItem="_selectedUser">
                    <ToolBarContent>
                        <MudText Typo="Typo.h6">Users Information</MudText>
                    </ToolBarContent>
                    <ColGroup>
                        <col style="width:30px;"/>
                        <col style="Width:200px"/>
                        <col style="width: 150px"/>
                    </ColGroup>
                    <HeaderContent>
                        <MudTh>
                            <MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<UserElement, object?>(x => x.UserId)">Username</MudTableSortLabel>
                        </MudTh>
                        <MudTh>
                            <MudTableSortLabel SortBy="new Func<UserElement, object?>(x => x.Password)">Password</MudTableSortLabel>
                        </MudTh>
                        <MudTh>Functions</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        @* ReSharper disable once RedundantSuppressNullableWarningExpression *@
                        <MudTd DataLabel="Username">@context!.UserId</MudTd>
                        @* ReSharper disable once RedundantSuppressNullableWarningExpression *@
                        <MudTd DataLabel="Password">@context!.Password</MudTd>
                        <MudTd>
                            <MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="Delete"></MudIconButton>
                            <MudIconButton Icon="@Icons.Material.Filled.ChangeHistory"></MudIconButton>
                        </MudTd>
                    </RowTemplate>
                    <PagerContent>
                        <MudTablePager/>
                    </PagerContent>
                </MudTable>

                <MudExpansionPanels Style="flex: 1;">
                    <MudExpansionPanel Text="Debug Information Log">
                        @foreach (var message in _editEvents)
                        {
                            <MudText>@message</MudText>
                        }
                        @if (_editEvents.Count > 0)
                        {
                            <div class="d-flex">
                                <MudSpacer/>
                                <MudButton Class="mt-3" ButtonType="ButtonType.Button" Variant="Variant.Filled">Clear event log</MudButton>
                            </div>
                        }
                    </MudExpansionPanel>
                </MudExpansionPanels>
            }
        }
    }
}

@code
{
    // For Page specific code
    private string? _username;
}

@code
{
    protected override async Task OnInitializedAsync()
    {
        var result = await _sessionStore.GetAsync<string>("User");
        if (result.Value is not {Length: > 1 }) _navMgr.NavigateTo("/");
    }

    private bool _add;
    private bool _view = true;

    private void ShowAdd()
    {
        _add = true;
        _view = false;
    }

    private void ShowView()
    {
        _add = false;
        _view = true;
    }


    private void FillTable()
    {
        if (_username is null or "") _username = "%";
        _userElements = UserService.GetUsers(_stateService.GetAppInfo(), _username!);
        _username = String.Empty;
    }
}

@code
{
    private readonly List<string> _editEvents = new();
    private UserElement? _selectedUser;
    private MudTable<UserElement>? _mudTableUsers;
    private IEnumerable<UserElement> _userElements = new List<UserElement>();
}

@code {
    readonly AddUserForm _addUserForm = new AddUserForm();
    public bool Success;
    public string? AddErrors;

    public class AddUserForm
    {
        [Required]
        [StringLength(30, ErrorMessage = "Name length can't be more than 30 or less then 4.", MinimumLength = 4)]
        public string? UsernameAdd { get; set; }

        [Required]
        [StringLength(100, ErrorMessage = "Password must be at least 8 characters long.", MinimumLength = 8)]
        public string? Password { get; set; }

        [Required]
        [Compare(nameof(Password))]
        public string? Password2 { get; set; }
    }

    private void OnValidSubmitAdd(EditContext context)
    {
        var info = UserService.LoadUser(_stateService.GetAppInfo(), _addUserForm.UsernameAdd!, "", false);
        if (info.UserId == _addUserForm.UsernameAdd)
        {
            AddErrors = $"User {_addUserForm.UsernameAdd} already exist ";
            return;
        }
        Success = UserService.AddUser(_stateService.GetAppInfo(), _addUserForm.UsernameAdd!, _addUserForm.Password!);
        if (!Success)
        {
            AddErrors = $"Adding User {_addUserForm.UsernameAdd} failed";
            return;
        }
        _addUserForm.UsernameAdd = "";
        _addUserForm.Password = "";
        _addUserForm.Password2 = "";
        StateHasChanged();
    }

}

@code
{
    private void Delete()
    {
        AddErrors = "";
        if (_selectedUser == null)
        {
            AddErrors = "No User Selected";
            return;
        }
        var info = UserService.LoadUser(_stateService.GetAppInfo(), _selectedUser!.UserId!, "", false);
        if (info.UserId != _selectedUser.UserId)
        {
            AddErrors = $"User '{_selectedUser.UserId}' does not exist";
            return;
        }

        Success = UserService.DeleteUser(_stateService.GetAppInfo(), _selectedUser.UserId!);
        if (!Success)
        {
            AddErrors = $"Deleting User {_selectedUser.UserId} failed";
            return;
        }

        _editEvents.Add($"User {_selectedUser.UserId} is deleted");
        FillTable();
        StateHasChanged();
    }
}

@code {

}