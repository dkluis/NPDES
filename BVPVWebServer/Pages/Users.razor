@page "/users"
@using Severity = MudBlazor.Severity

@inject ProtectedSessionStorage _sessionStore

@inject StateService _stateService
@inject NavigationManager _navMgr

@inject UserService _userService

<PageTitle>Users</PageTitle>

@{
    if (!_stateService.IsLoggedIn)
    {
        _navMgr.NavigateTo("/");
    }
    else
    {
        if (UserService.CanUserUseApp(_stateService.GetAppInfo(), _stateService.UserId, "users") == false)
        {
            <MudAlert Severity="Severity.Error">User @_stateService.UserId cannot use this App based on your Role profile.</MudAlert>
        }
        else
        {
            <MudText Typo="Typo.h4" Align="Align.Center">User Management</MudText>

            <MudButtonGroup Color="Color.Primary" Variant="Variant.Filled">
                <MudButton @onclick="ShowAdd" StartIcon="@Icons.Material.Filled.Add">Add</MudButton>
                <MudButton @onclick="ShowDelete" StartIcon="@Icons.Material.Filled.Delete">Delete</MudButton>
                <MudButton @onclick="ShowChangePassword" StartIcon="@Icons.Material.Filled.ChangeHistory" IconColor="Color.Warning">Reset Password</MudButton>
            </MudButtonGroup>

            if (_add)
            {
                <MudAlert>Add is active</MudAlert>
            }
            if (_delete)
            {
                <MudAlert>Delete is active</MudAlert>
            }
            if (_password)
            {
                <MudAlert>Change Password is active</MudAlert>
            }
            <!---This is the Table View Area -->
            <div style="max-width: 300px;">
                <MudCard Outlined="true" Elevation="2">
                    <MudCardContent>
                        <MudTooltip Text="Use % for wildcard.  Example:  %find% or Find% or %Find" Placement="Placement.End">
                        <MudTextField Placeholder="%" Label="Username" HelperText="Use % to get all Users" @bind-Value="_username"/>
                        </MudTooltip>
                    </MudCardContent>
                    <MudCardActions>
                        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto"
                                   OnClick="FillTable" >Fill Table</MudButton>
                    </MudCardActions>
                </MudCard>
                <MudAlert Severity="Severity.Info" Align="Align.Center" Class="my-4">% in Username will show all.</MudAlert>
            </div>
            
            <MudTable Items="@_elements" Dense="true" Hover="true" CanCancelEdit="true" ReadOnly="false" 
                      FixedHeader="true" FixedFooter="true" Height="300px" 
                      @bind-SelectedItem="_selectedItem1" SortLabel="Sort By" CommitEditTooltip="Commit Edit"
                      RowEditPreview="BackupItem" RowEditCancel="ResetItemToOriginalValues"
                      RowEditCommit="ItemHasBeenCommitted" IsEditRowSwitchingBlocked="@BlockSwitch">
                <ToolBarContent>
                    <MudText Typo="Typo.h6">Users Information</MudText>

                </ToolBarContent>
                <ColGroup>
                    <col style="width:15px;"/>
                    <col/>
                    <col/>
                    
                </ColGroup>
                <HeaderContent>
                    <MudTh>
                        <MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<UserElement, object>(x => x.UserId)">Username</MudTableSortLabel>
                    </MudTh>
                    <MudTh>
                        <MudTableSortLabel SortBy="new Func<UserElement, object>(x => x.Password)">Password</MudTableSortLabel>
                    </MudTh>
                    <MudTh>
                        <MudTableSortLabel SortBy="new Func<UserElement, object>(x => x.Salt)">Salt</MudTableSortLabel>
                    </MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Username">@context.UserId</MudTd>
                    <MudTd DataLabel="Password">@context.Password</MudTd>
                    <MudTd DataLabel="Salt">@context.Salt</MudTd>
                </RowTemplate>
                <RowEditingTemplate>
                    <MudTd DataLabel="Username">@context.UserId</MudTd>
                    <MudTd DataLabel="Password">@context.Password</MudTd>
                    <MudTd DataLabel="Salt">@context.Salt</MudTd>
                </RowEditingTemplate>
                <PagerContent>
                    <MudTablePager/>
                </PagerContent>
            </MudTable>

            <MudExpansionPanels Style="flex: 1;">
                <MudExpansionPanel Text="Debug Information Log">
                    @foreach (var message in editEvents)
                    {
                        <MudText>@message</MudText>
                    }
                    @if (editEvents.Count > 0)
                    {
                        <div class="d-flex">
                            <MudSpacer/>
                            <MudButton Class="mt-3" ButtonType="ButtonType.Button" Variant="Variant.Filled" OnClick="ClearEventLog">Clear event log</MudButton>
                        </div>
                    }
                </MudExpansionPanel>
            </MudExpansionPanels>
        }
    }
}

@code
{
    // For Page specific code
    private string? _username;
}

@code
{
    //Template code

    protected override async Task OnInitializedAsync()
    {
        var result = await _sessionStore.GetAsync<string>("User");
        if (result.Value is not {Length: > 1 }) _navMgr.NavigateTo("/");
        _username = "%";
    }

    private bool _add;
    private bool _delete;
    private bool _password;

    private void ShowAdd()
    {
        _add = true;
        _delete = false;
        _password = false;
    }

    private void ShowDelete()
    {
        _add = false;
        _delete = true;
        _password = false;
    }

    private void ShowChangePassword()
    {
        _add = false;
        _delete = false;
        _password = true;
    }

    private void FillTable()
    {
        _elements = UserService.GetUsers(_stateService.GetAppInfo(), _username!);
    }
}

@code 
{ 
    private List<string> editEvents = new();
    public bool BlockSwitch = false;
    private UserElement? _selectedItem1;
    private UserElement? _elementBeforeEdit;
    private IEnumerable<UserElement> _elements = new List<UserElement>();

    private void ClearEventLog()
    {
        editEvents.Clear();
    }

    private void AddEditionEvent(string message)
    {
        editEvents.Add(message);
        StateHasChanged();
    }

    private void BackupItem(object element)
    {
        _elementBeforeEdit = new()
        {
            UserId = ((UserElement)element).UserId,
            Password = ((UserElement)element).Password,
            Salt = ((UserElement)element).Salt
        };
        AddEditionEvent($"RowClick Selected {((UserElement)element).UserId}");
    }

    private void ItemHasBeenCommitted(object element)
    {
        //TODO add the update to the user table
        AddEditionEvent($"RowSave {((UserElement)element).UserId}");
    }

    private void ResetItemToOriginalValues(object element)
    {
        ((UserElement)element).UserId = _elementBeforeEdit!.UserId;
        ((UserElement)element).Password = _elementBeforeEdit.Password;
        ((UserElement)element).Salt = _elementBeforeEdit.Salt;
        AddEditionEvent($"RowSwitch away from {((UserElement)element).UserId}");
    }
}