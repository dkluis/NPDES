@page "/users"

@inject NavigationManager _navMgr

@inject ISnackbar _snackbar
@using Severity = MudBlazor.Severity


@inject ProtectedSessionStorage _sessionStore
@inject StateService _stateService
@inject UserService _userService

<PageTitle>Users</PageTitle>

@{
    if (!_stateService.IsLoggedIn)
    {
        _navMgr.NavigateTo("/");
    }
    else
    {
        if (UserService.CanUserUseApp(_stateService.GetAppInfo(), _stateService.UserId, "users") == false)
        {
            <MudAlert Severity="Severity.Error">User @_stateService.UserId cannot use this App based on your Role profile.</MudAlert>
        }
        else
        {
            <MudText Typo="Typo.h4" Align="Align.Center">User Management</MudText>

            <MudExpansionPanels Style="flex: 1;">
                <MudExpansionPanel Style="font-weight: bold" Text="Add A New User">
                    <div style="max-width: 400px;">
                        <MudCard Outlined="true">
                            <MudText Typo="Typo.h5" Align="Align.Center">Add User</MudText>
                            <EditForm Model="@_addUserForm" OnValidSubmit="OnValidSubmitAdd">
                                <DataAnnotationsValidator/>
                                <MudGrid>
                                    <MudItem xs="12">
                                        <MudCard>
                                            <MudCardContent>
                                                <MudTextField Label="Username" HelperText="Max. 30 characters"
                                                              @bind-Value="_addUserForm.UsernameAdd" For="@(() => _addUserForm.UsernameAdd)"/>
                                                <MudTextField Label="Password" HelperText="Choose a strong password" Class="mt-3"
                                                              @bind-Value="_addUserForm.Password" For="@(() => _addUserForm.Password)" InputType="InputType.Password"/>
                                                <MudTextField Label="Password" HelperText="Repeat the password" Class="mt-3"
                                                              @bind-Value="_addUserForm.Password2" For="@(() => _addUserForm.Password2)" InputType="InputType.Password"/>
                                            </MudCardContent>
                                            <MudCardActions>
                                                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Add User</MudButton>
                                            </MudCardActions>
                                        </MudCard>
                                    </MudItem>
                                </MudGrid>
                            </EditForm>
                        </MudCard>
                    </div>
                </MudExpansionPanel>
            </MudExpansionPanels>


            <div style="max-width: 400px; margin-left: 26px; margin-top: 20px;">
                <MudCard Outlined="true" Elevation="4">
                    <MudCardContent>
                        <MudText Typo="Typo.h5" Align="Align.Center">Search Users</MudText>
                        <MudTextField Label="Username" HelperText="Use % for wildcard searches" @bind-Value="_username"/>
                    </MudCardContent>
                    <MudCardActions>
                        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="FillTable">Fill Table</MudButton>
                    </MudCardActions>
                </MudCard>
            </div>

            <MudTable Items="@_userElements" Dense="true" Hover="true" FixedHeader="true" Height="375px"
                      Breakpoint="Breakpoint.Sm" @ref="_mudTableUsers">
                <ToolBarContent>
                    <MudText Typo="Typo.h6">Users Information</MudText>
                </ToolBarContent>
                <ColGroup>
                    <col style="width: 125px;"/>
                    <col style="width: 50px;"/>
                    <col/>
                </ColGroup>
                <HeaderContent>
                    <MudTh>
                        <MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<UserElement, object?>(x => x.UserId)">Username</MudTableSortLabel>
                    </MudTh>
                    <MudTh>
                        <MudTableSortLabel SortBy="new Func<UserElement, object?>(x => x.Enabled)">Enabled</MudTableSortLabel>
                    </MudTh>
                    <MudTh>
                        <MudText>Actions</MudText>
                    </MudTh>
                </HeaderContent>
                <RowTemplate>
                    @* ReSharper disable once RedundantSuppressNullableWarningExpression *@
                    <MudTd DataLabel="Username">@context!.UserId</MudTd>
                    <MudTd DataLabel="Enabled">@context.Enabled</MudTd>
                    <MudTd>
                        <div style="font-weight: bold;">
                            <MudButtonGroup Color="Color.Primary" Variant="Variant.Filled">
                                <Mudbutton @onclick="() => RedirectToUserEdit(context!.UserId!)">&#8942;</Mudbutton>
                            </MudButtonGroup>
                        </div>
                    </MudTd>
                </RowTemplate>
                <PagerContent>
                    <MudTablePager PageSizeOptions="new []{25, 50, 100}"/>
                </PagerContent>
            </MudTable>
        }
    }
}

@code
{
    // For Page specific code
    private string? _username;

    private void RedirectToUserEdit(string userid)
    {
        _navMgr.NavigateTo($"useredit/{userid}");
    }
}

@code
{
    protected override async Task OnInitializedAsync()
    {
        var result = await _sessionStore.GetAsync<string>("User");
        if (result.Value is not {Length: > 1 }) _navMgr.NavigateTo("/");
        _snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
        _snackbar.Configuration.NewestOnTop = true;
        _snackbar.Configuration.VisibleStateDuration = 5000;
        FillTable();
    }

    private void FillTable()
    {
        if (_username is null or "") _username = "%";
        _userElements = UserService.GetUsers(_stateService.GetAppInfo(), _username!);
        _username = string.Empty;
    }
}

@code
{
    private MudTable<UserElement>? _mudTableUsers;
    private IEnumerable<UserElement> _userElements = new List<UserElement>();
}

@code {
    readonly AddUserForm _addUserForm = new();
    private bool _success;

    public class AddUserForm
    {
        [Required]
        [StringLength(30, ErrorMessage = "Name length can't be more than 30.")]
        public string? UsernameAdd { get; set; }

        [Required]
        [StringLength(30, ErrorMessage = "Password must be at least 8 characters long.", MinimumLength = 8)]
        public string? Password { get; set; }

        [Required]
        [Compare(nameof(Password))]
        public string? Password2 { get; set; }
    }

    private void OnValidSubmitAdd(EditContext context)
    {
        var info = UserService.LoadUser(_stateService.GetAppInfo(), _addUserForm.UsernameAdd!, "", false);
        if (info.UserId == _addUserForm.UsernameAdd)
        {
            _snackbar.Add($"User {_addUserForm.UsernameAdd} already exist", Severity.Error);
            return;
        }
        _success = UserService.AddUser(_stateService.GetAppInfo(), _addUserForm.UsernameAdd!, _addUserForm.Password!);
        if (!_success)
        {

            _snackbar.Add($"Adding User {_addUserForm.UsernameAdd} has been changed", Severity.Error);
            return;
        }
        _snackbar.Add($"User {_addUserForm.UsernameAdd} has been added", Severity.Info);
        _navMgr.NavigateTo($"/useredit/{_addUserForm.UsernameAdd}");
        _addUserForm.UsernameAdd = "";
        _addUserForm.Password = "";
        _addUserForm.Password2 = "";
        StateHasChanged();
    }

}

@code {

}
