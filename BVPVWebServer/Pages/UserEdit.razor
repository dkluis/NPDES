@page "/useredit/{PassedUserId?}"

@inject NavigationManager _navMgr

@using Severity = MudBlazor.Severity
@inject ISnackbar _snackbar

@inject ProtectedSessionStorage _sessionStore
@inject StateService _stateService
@inject UserService _userService

<PageTitle>User @PassedUserId</PageTitle>

@{
    if (!_stateService.IsLoggedIn)
    {
        _navMgr.NavigateTo("/");
    }
    else
    {
        if (UserService.CanUserUseApp(_stateService.GetAppInfo(), _stateService.UserId, "users") == false)
        {
            <MudAlert Severity="Severity.Error">User @_stateService.UserId cannot use this App based on your Role profile.</MudAlert>
        }
        else
        {
            <MudText Typo="Typo.h4" Align="Align.Center">Editing User: @PassedUserId</MudText>

            <MudExpansionPanels Style="flex: 1;" Elevation="4">
                <MudExpansionPanel Style="font-weight: bold" Text="Toggle Enabled or Delete">
                    <MudGrid>
                        <MudItem>
                            <MudText Style="margin-top: 13px;" Typo="Typo.h6">Enabled is: @(_isEnabled ? "On" : "Off")</MudText>
                        </MudItem>
                        <MudItem>
                            <MudToggleIconButton Toggled="_isEnabled" ToggledChanged="EnableChange" ToggledSize="Size.Large" Size="Size.Large"
                                                 Icon="@Icons.Material.Filled.ToggleOff" Color="Color.Warning" Title="Disabled"
                                                 ToggledIcon="@Icons.Material.Filled.ToggleOn" ToggledColor="Color.Info" ToggledTitle="Enabled">
                            </MudToggleIconButton>
                        </MudItem>
                        <MudItem>
                            <MudButtonGroup Color="Color.Secondary" Variant="Variant.Filled" Style="margin-top: 10px; margin-bottom: 20px; margin-left: 20px;">
                                <MudButton @onclick="OnButtonClicked" StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error">Delete User: @PassedUserId</MudButton>
                            </MudButtonGroup>
                        </MudItem>
                    </MudGrid>
                </MudExpansionPanel>

                <MudExpansionPanel Style="font-weight: bold" Text="Change Password">
                    <div style="max-width: 400px;">
                        <MudCard Outlined="true">
                            <MudText Typo="Typo.h5" Align="Align.Center">Change Password</MudText>
                            <EditForm Model="@_changeUserPasswordForm" OnValidSubmit="OnValidSubmitChange">
                                <DataAnnotationsValidator/>
                                <MudGrid>
                                    <MudItem xs="12">
                                        <MudCard>
                                            <MudCardContent>
                                                <MudTextField Label="Password" HelperText="Choose a strong password" Class="mt-3"
                                                              @bind-Value="_changeUserPasswordForm.PasswordChange" For="@(() => _changeUserPasswordForm.PasswordChange)" InputType="InputType.Password"/>
                                                <MudTextField Label="Password" HelperText="Repeat the password" Class="mt-3"
                                                              @bind-Value="_changeUserPasswordForm.PasswordChange2" For="@(() => _changeUserPasswordForm.PasswordChange2)" InputType="InputType.Password"/>
                                            </MudCardContent>
                                            <MudCardActions>
                                                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Change Password</MudButton>
                                            </MudCardActions>
                                        </MudCard>
                                    </MudItem>
                                </MudGrid>
                            </EditForm>
                        </MudCard>
                    </div>
                </MudExpansionPanel>
                <MudExpansionPanel Style="font-weight: bold" Text="Manage User's Roles" IsInitiallyExpanded="true">
                    <MudText Typo="Typo.h6">Current Roles of @PassedUserId:</MudText>
                    <MudItem>

                        <MudChipSet AllClosable="true" OnClose="RemoveRoleChip">
                            @{
                                foreach (var role in _assignedRoles)
                                {
                                    <MudChip Text="@role"></MudChip>
                                }
                            }
                        </MudChipSet>

                        <MudText Typo="Typo.h6">Add the appropriate Role(s):</MudText>
                        @{
                            foreach (var role in _allUserRoles)
                            {
                                <MudButton StartIcon="@Icons.Material.Filled.Add" Color="Color.Tertiary" Variant="Variant.Filled"
                                           Style="margin-right: 10px; margin-bottom: 10px;" @onclick="() => AddRoleChip(role)">
                                    @role
                                </MudButton>
                            }
                        }

                    </MudItem>
                    <MudButton Style="margin-top: 20px;" Color="Color.Primary" Variant="Variant.Filled" OnClick="UpdateRoles">Submit Role Update</MudButton>
                </MudExpansionPanel>

                <MudExpansionPanel Style="font-weight: bold" Text="View Apps by User">
                    <MudTable Items="@_appsByUsers" Dense="true" Hover="true" FixedHeader="true" Height="375px"
                              Breakpoint="Breakpoint.Sm" @ref="_mudTableAppsByUsers" RowsPerPage=25
                              Filter="new Func<AppsByUser,bool>(FilterFunc1)">
                        <ToolBarContent>
                            <MudText Typo="Typo.h6">@PassedUserId's Apps by Role</MudText>
                            <MudSpacer></MudSpacer>
                            <MudTextField @bind-Value="_searchAppsByRole" Placeholder="Search" 
                                          Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" 
                                          IconSize="Size.Medium" Class="mt-0"></MudTextField>
                        </ToolBarContent>
                        <ColGroup>
                            <col/>
                            <col/>
                            <col/>
                            <col/>
                            <col/>
                            <col/>
                            <col/>
                            <col/>
                        </ColGroup>
                        <HeaderContent>
                            <MudTh>Username</MudTh>
                            <MudTh>
                                <MudTableSortLabel SortBy="new Func<AppsByUser, object?>(x => x.Role)">Role</MudTableSortLabel>
                            </MudTh>
                            <MudTh>
                                <MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<AppsByUser, object?>(x => x.App)">App</MudTableSortLabel>
                            </MudTh>
                            <MudTh>Function</MudTh>
                            <MudTh>Report</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            @* ReSharper disable once RedundantSuppressNullableWarningExpression *@
                            <MudTd DataLabel="Username">@context!.User</MudTd>
                            <MudTd DataLabel="Role">@context.Role</MudTd>
                            <MudTd DataLabel="App">@context.App</MudTd>
                            <MudTd DataLabel="Function">@context.Function</MudTd>
                            <MudTd DataLabel="Report">@context.Report</MudTd>
                        </RowTemplate>
                        <PagerContent>
                            <MudTablePager PageSizeOptions="new[] {25, 50, 100}"/>
                        </PagerContent>
                    </MudTable>
                </MudExpansionPanel>

            </MudExpansionPanels>
        }
    }
}

<MudMessageBox @ref="DelBox" Title="Delete Warning" CancelText="Cancel">
    <MessageContent>
        <MudText Color="Color.Error">Deleting User: @_selectedUserId CANNOT be undone!!!</MudText>
        <MudText Color="Color.Warning">Consider Setting User Enabled to Off</MudText>
    </MessageContent>
    <YesButton>
        <MudButton OnClick="@(Delete)" Variant="Variant.Filled" Color="Color.Error" StartIcon="@Icons.Material.Filled.DeleteForever">Delete</MudButton>
    </YesButton>
</MudMessageBox>

@code
{
    // For Page specific code
    private List<string> _allUserRoles = new();
    private List<string> _assignedRoles = new();
    private List<string> _originalAssignedRoles = new();
    private List<AppsByUser> _appsByUsers = new();
    private MudTable<AppsByUser>? _mudTableAppsByUsers;
    private bool _isEnabled;
    private User? _currentUser;

    [Parameter]
    public string? PassedUserId { get; set; }

}

@code
{
    protected override async Task OnInitializedAsync()
    {
        var result = await _sessionStore.GetAsync<string>("User");
        if (result.Value is not {Length: > 1 }) _navMgr.NavigateTo("/");

        PassedUserId ??= "No User";

        _currentUser = UserService.LoadUser(_stateService.GetAppInfo(), PassedUserId, "", false);
        _isEnabled = _currentUser.Enabled;

        _allUserRoles = RoleService.GetAllRoleIds();
        _assignedRoles = UserService.AllAssignedRoles(PassedUserId!);
        _originalAssignedRoles = _assignedRoles.ToList();
        _appsByUsers = _userService.GetAppsByUser(_stateService.GetAppInfo(), PassedUserId);

        _snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
        _snackbar.Configuration.NewestOnTop = true;
        _snackbar.Configuration.VisibleStateDuration = 5000;
    }
}

@code
{
    private void RemoveRoleChip(MudChip chip) => _assignedRoles.Remove(chip.Text);

    private void AddRoleChip(string role)
    {
        if (!_assignedRoles.Contains(role))
        {
            _assignedRoles.Add(role);
        }
        else
        {
            _snackbar.Add($"Role {role} is already assigned", Severity.Warning);
        }
    }
}

@code
{
    // ReSharper disable once CollectionNeverQueried.Local
    private readonly List<string> _editEvents = new();
    private string? _selectedUserId;
}

@code {
    readonly ChangePasswordForm _changeUserPasswordForm = new();
    private bool _changeSuccess;

    public class ChangePasswordForm
    {
        [Required]
        [StringLength(100, ErrorMessage = "Password must be at least 8 characters long.", MinimumLength = 8)]
        public string? PasswordChange { get; set; }

        [Required]
        [Compare(nameof(PasswordChange))]
        public string? PasswordChange2 { get; set; }
    }

    private void OnValidSubmitChange(EditContext context)
    {
        var info = UserService.LoadUser(_stateService.GetAppInfo(), PassedUserId!, "", false);
        if (info.UserId != PassedUserId)
        {
            _snackbar.Add($"User {PassedUserId} does not exist", Severity.Error);
            return;
        }
        _changeSuccess = UserService.ChangePassword(_stateService.GetAppInfo(), PassedUserId!, _changeUserPasswordForm.PasswordChange!);
        if (!_changeSuccess)
        {
            _snackbar.Add($"Changing Password {PassedUserId} failed", Severity.Error);
            return;
        }
        _changeUserPasswordForm.PasswordChange = "";
        _changeUserPasswordForm.PasswordChange2 = "";
        _snackbar.Add($"Password for {PassedUserId} has been changed", Severity.Info);
        StateHasChanged();
    }

}

@code
{
    MudMessageBox? DelBox { get; set; }

    private async void OnButtonClicked()
    {
        _selectedUserId = PassedUserId;
        await DelBox!.Show();
        StateHasChanged();
    }
}


@code
{
    private void Delete()
    {
        if (PassedUserId == "")
        {
            _editEvents.Add("No User Passed");
            _snackbar.Add("No User was passed into this page, returned to User Page.", Severity.Error);
            _navMgr.NavigateTo("/users");
            return;
        }
        var info = UserService.LoadUser(_stateService.GetAppInfo(), PassedUserId!, "", false);
        if (info.UserId != PassedUserId)
        {
            _snackbar.Add($"User '{PassedUserId}' does not exist", Severity.Error);
            return;
        }

        var success = UserService.DeleteUser(_stateService.GetAppInfo(), PassedUserId!);
        if (!success)
        {
            _snackbar.Add($"Deleting User {PassedUserId} failed", Severity.Error);
            return;
        }

        _snackbar.Add($"User {PassedUserId} is deleted", Severity.Info);

        StateHasChanged();
        _navMgr.NavigateTo("/users");
    }
}

@code {

    private void UpdateRoles()
    {
        var rolesToDel = _originalAssignedRoles.Where(originalRole => !_assignedRoles.Contains(originalRole)).ToList();
        var rolesToAdd = _assignedRoles.Where(newRole => !_originalAssignedRoles.Contains(newRole)).ToList();

        var successDel = true;
        var successAdd = true;
        if (rolesToAdd.Count > 0)
        {
            successAdd = UserService.AddUserRoles(_stateService.GetAppInfo(), PassedUserId!, rolesToAdd);
            if (!successAdd) _snackbar.Add($"User {PassedUserId} add roles error", Severity.Error);
        }
        if (rolesToDel.Count > 0)
        {
            successDel = UserService.DeleteUserRoles(_stateService.GetAppInfo(), PassedUserId!, rolesToDel);
            if (!successDel) _snackbar.Add($"User {PassedUserId} delete roles error", Severity.Error);
        }
        if (rolesToAdd.Count > 0 || rolesToDel.Count > 0)
        {
            if (successAdd && successDel) _snackbar.Add($"User {PassedUserId} roles are updated", Severity.Info);
        }
        _appsByUsers = _userService.GetAppsByUser(_stateService.GetAppInfo(), PassedUserId!);
        StateHasChanged();
    }

    private void EnableChange(bool toggle)
    {
        _isEnabled = !_isEnabled;
        var success = UserService.ChangeEnabled(_stateService.GetAppInfo(), PassedUserId!, _isEnabled);
        if (!success)
        {
            _snackbar.Add($"Failed to update user enablement", Severity.Error);
        }
        else
        {
            _snackbar.Add(_isEnabled ? $"User {PassedUserId} is set to Enabled" : $"User {PassedUserId} is set to Disabled", Severity.Info);
        }
        StateHasChanged();
        _navMgr.NavigateTo("/users");
    }
}

@code
{
    private string _searchAppsByRole = string.Empty;
    
    private bool FilterFunc1(AppsByUser appsByUser) => FilterFunc(appsByUser, _searchAppsByRole);

    private bool FilterFunc(AppsByUser appsByUser, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (appsByUser.Role.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (appsByUser.App.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (appsByUser.Function.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }
}
