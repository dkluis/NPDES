@inherits LayoutComponentBase

@inject ProtectedSessionStorage _sessionStore
@inject NavigationManager _navMgr
@inject ISnackbar _snackbar

@inject StateService _stateService

<MudThemeProvider Theme="_themeManager.Theme"></MudThemeProvider>
<MudDialogProvider></MudDialogProvider>
<MudSnackbarProvider></MudSnackbarProvider>
<PageTitle>Home NPDES</PageTitle>

<MudThemeProvider/>

<MudLayout>
    <MudAppBar Elevation="_themeManager.AppBarElevation">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())"/>
        <MudSpacer/>
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" ClipMode="_themeManager.DrawerClipMode" Elevation="_themeManager.DrawerElevation">
        <MudDrawerHeader>
            <MudText Typo="Typo.h5" Class="mt-1">BVPV Styropek</MudText>
        </MudDrawerHeader>
        <NavMenu></NavMenu>
    </MudDrawer>
    <!--  Future implementation MAYBE
    <MudThemeManagerButton OnClick="@() => OpenThemeManager(true)" />
    <MudThemeManager Open="_themeManagerOpen" OpenChanged="OpenThemeManager" Theme="_themeManager" ThemeChanged="UpdateTheme" />
    -->
    <MudMainContent>
        @Body
    </MudMainContent>
</MudLayout>


@code {
    bool _drawerOpen = true;

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    private ThemeManagerTheme _themeManager = new();
    private bool _themeManagerOpen;

    void OpenThemeManager(bool value)
    {
        _themeManagerOpen = value;
    }

    void UpdateTheme(ThemeManagerTheme value)
    {
        _themeManager = value;
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        var result = await _sessionStore.GetAsync<string>("User");
        if (result.Value is  {Length: > 1 })
        {
            _stateService.InitUserInfo(result.Value);
            _stateService.IsLoggedIn = true;
        }
        StateHasChanged();
    }

}