@using BVPVWebServer.Dialogs
@inherits LayoutComponentBase

@inject IDialogService DialogService

@inject ProtectedSessionStorage SessionStore
@inject NavigationManager NavMgr
@inject StateService StateService

<PageTitle>Home NPDES</PageTitle>

<MudThemeProvider/>
<MudDialogProvider FullWidth="true" NoHeader="true" Position="DialogPosition.TopRight" CloseOnEscapeKey="true" MaxWidth="MaxWidth.Medium"></MudDialogProvider>
<MudSnackbarProvider/>

<MudLayout>
    <MudAppBar Elevation="_themeManager.AppBarElevation">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@(e => DrawerToggle())"/>
        <MudSpacer></MudSpacer>
        <MudIconButton Icon="@Icons.Material.Filled.HelpCenter" Color="Color.Inherit" OnClick="Help"></MudIconButton>
        @{
            var user = "";
            if (StateService.UserId != "Init")
            {
                user = StateService.UserId;
                <MudButton Size="Size.Large" StartIcon="@Icons.Material.Filled.PersonPin" Color="Color.Inherit" Edge="Edge.End" OnClick="UserSystemState">@user</MudButton>
            }
        }
        <MudIconButton Icon="@Icons.Material.Filled.Logout" Color="Color.Inherit" Edge="Edge.End" OnClick="Logout"></MudIconButton>
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" ClipMode="_themeManager.DrawerClipMode" Elevation="_themeManager.DrawerElevation">
        <MudDrawerHeader>
            <MudText Typo="Typo.h5" Class="mt-1">BVPV Styropek</MudText>
        </MudDrawerHeader>
        <NavMenu></NavMenu>
    </MudDrawer>
    <MudMainContent>
        @Body
    </MudMainContent>
</MudLayout>


@code {
    bool _drawerOpen = true;

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    private readonly ThemeManagerTheme _themeManager = new();
    
    protected override async Task OnInitializedAsync()
    {
        var result = await SessionStore.GetAsync<string>("User");
        if (result.Value is {Length: > 1 })
        {
            StateService.InitUserInfo(result.Value);
            StateService.IsLoggedIn = true;
        }
        StateHasChanged();
    }

    private void Logout()
    {
        SessionStore.DeleteAsync("User");
        SessionStore.DeleteAsync("EntryPage");
        SessionStore.DeleteAsync("CurrentAPP");
        StateService.IsLoggedIn = false;
        NavMgr.NavigateTo("/", forceLoad: true);
    }

    private void UserSystemState()
    {
        var navTo = $"/Users/Profile/{StateService.UserId}";
        NavMgr.NavigateTo(navTo);
    }

}

@code 
{

    private async Task Help()
    {
        var result = await SessionStore.GetAsync<string>("CurrentApp");
        var currentApp = result.Value;
        var help = MarkdownService.GetMarkDownFile(StateService.GetAppInfo(), $"{currentApp}.md");
        var parameters = new DialogParameters
        {
            {"CurrentApp", currentApp},
            {"HelpContent", help}
        };

        DialogService.Show<HelpDialog>("Help (Markdown coming) Example", parameters);
        StateHasChanged();
    }
}