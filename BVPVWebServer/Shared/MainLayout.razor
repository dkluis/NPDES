@inherits LayoutComponentBase

@inject StateService _state
@{
    if (_state == null)
    {
        _state!.InitUserInfo("Init");
    }
}

<MudThemeProvider Theme="_themeManager.Theme"></MudThemeProvider>
<MudDialogProvider></MudDialogProvider>
<MudSnackbarProvider></MudSnackbarProvider>
<PageTitle>Home NPDES</PageTitle>

<MudThemeProvider/>

<MudLayout>
    <MudAppBar Elevation="_themeManager.AppBarElevation">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())"/>
        <MudSpacer/>
        @if (_state.IsLoggedIn)
        {
            <MudIconButton Icon="@Icons.Material.Filled.Person" Color="Color.Inherit"/>
            <MudText Typo="Typo.h6">@_state.UserId</MudText>
            <MudIconButton Icon="@Icons.Material.Filled.Logout" Color="Color.Inherit"/>
        }
        @if (!_state.IsLoggedIn)
        {
            <MudIconButton Icon="@Icons.Material.Filled.Login" Color="Color.Inherit"/>
        }
        
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" ClipMode="_themeManager.DrawerClipMode" Elevation="_themeManager.DrawerElevation">
        <MudDrawerHeader>
            <MudText Typo="Typo.h5" Class="mt-1">BVPV Styropek</MudText>
        </MudDrawerHeader>
        <NavMenu></NavMenu>
    </MudDrawer>
    <!--  Future implementation MAYBE
    <MudThemeManagerButton OnClick="@((e) => OpenThemeManager(true))" />
    <MudThemeManager Open="ThemeManagerOpen" OpenChanged="OpenThemeManager" Theme="_themeManager" ThemeChanged="UpdateTheme" />
    -->
    <MudMainContent>
        @Body
    </MudMainContent>
</MudLayout>


@code {
    bool _drawerOpen = true;

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    private ThemeManagerTheme _themeManager = new ThemeManagerTheme();
    public bool ThemeManagerOpen;

    void OpenThemeManager(bool value)
    {
        ThemeManagerOpen = value;
    }

    void UpdateTheme(ThemeManagerTheme value)
    {
        _themeManager = value;
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        StateHasChanged();
    }

}